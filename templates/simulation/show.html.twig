{% extends 'base.html.twig' %}

{% block title %}Simulazione #{{ simulation.id }} - {{ student.firstName }} {{ student.lastName }}{% endblock %}

{% block content %}
            <div class="breadcrumb">
                <a href="/">Home</a> > 
                <a href="/student/{{ student.id }}">{{ student.firstName }} {{ student.lastName }}</a> > 
                Simulazione #{{ simulation.id }}
            </div>
            
            <h1>Simulazione #{{ simulation.id }}</h1>
            
            {% if successMessage %}
                <div class="alert alert-success" style="background: #d4edda; color: #155724; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #c3e6cb;">
                    ‚úÖ {{ successMessage }}
                </div>
            {% endif %}
            
            <div class="student-info">
                <h2>Studente: {{ student.firstName }} {{ student.lastName }}</h2>
                <p><strong>Email:</strong> {{ student.email }}</p>
                <p><strong>Data Creazione:</strong> {{ simulation.createdAt|date('d/m/Y H:i') }}</p>
                {% if simulation.updatedAt != simulation.createdAt %}
                <p><strong>Ultima Modifica:</strong> {{ simulation.updatedAt|date('d/m/Y H:i') }}</p>
                {% endif %}
            </div>
            
            <!-- Simulatore CFU -->
            <div class="simulator-container">
                <h2 class="simulator-title">üéì Simulatore CFU</h2>
                
                <div class="simulator-section">
                    <div class="form-group">
                        <label for="simulator-cdl">Seleziona Corso di Laurea <span class="required">*</span></label>
                        <select id="simulator-cdl" name="simulator-cdl" disabled>
                            <option value="">Seleziona corso di laurea</option>
                            {% for cdl in cdlOptions %}
                                <option value="{{ cdl.cdl }}" {% if simulation.cdl == cdl.cdl %}selected{% endif %}>{{ cdl.cdl }} - {{ cdl.orient }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <h3 style="color: #E57552; margin-bottom: 20px;">Discipline Esterne da Riconoscere</h3>
                    <div id="discipline-rows">
                        <!-- Le righe delle discipline verranno aggiunte dinamicamente -->
                    </div>
                    <button type="button" class="btn-add-discipline" id="add-discipline">+ Aggiungi Disciplina</button>
                    <button type="button" class="btn-simulate" id="simulate-btn" onclick="return false;">Calcola Simulazione</button>
                </div>
                
                <!-- Risultati -->
                <div class="results-container" id="results-container">
                    <h3 style="color: #E57552; margin-bottom: 20px;">Risultati Simulazione</h3>
                    
                    <!-- Legenda Stati -->
                    <div class="stato-legend" style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #E57552;">
                        <h5 style="margin: 0 0 10px 0; color: #E57552;">üìã Legenda Stati:</h5>
                        <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <span class="stato-tot">TOT</span>
                                <span style="font-size: 14px;">= Totale (riconoscimento completo)</span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <span class="stato-parziale">PARZIALE</span>
                                <span style="font-size: 14px;">= Parziale (riconoscimento parziale)</span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <span class="stato-non">NON</span>
                                <span style="font-size: 14px;">= Non riconosciuto</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tabella Dettaglio -->
                    <div class="table-section">
                        <h4>Dettaglio Riconoscimenti</h4>
                        <table class="results-table" id="detail-table">
                            <thead>
                                <tr>
                                    <th>Disciplina Unimarconi</th>
                                    <th>CFU Richiesti</th>
                                    <th>Disciplina Esterna</th>
                                    <th>CFU Assegnati</th>
                                    <th>Priorit√†</th>
                                    <th>Stato</th>
                                    <th>Note</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                        <div class="pagination" id="detail-pagination"></div>
                    </div>
                    
                    <!-- Tabella Riepilogo -->
                    <div class="table-section">
                        <h4>Riepilogo</h4>
                        <table class="results-table" id="summary-table">
                            <thead>
                                <tr>
                                    <th>Disciplina Unimarconi</th>
                                    <th>CFU Richiesti</th>
                                    <th>CFU Riconosciuti</th>
                                    <th>Integrativi Richiesti</th>
                                    <th>Stato</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                        <div class="pagination" id="summary-pagination"></div>
                    </div>
                    
                    <!-- Tabella Rimanenze -->
                    <div class="table-section">
                        <h4>Rimanenze</h4>
                        <table class="results-table" id="leftover-table">
                            <thead>
                                <tr>
                                    <th>Disciplina Esterna</th>
                                    <th>CFU Residui</th>
                                    <th>Motivazione</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                        <div class="pagination" id="leftover-pagination"></div>
                    </div>
                    
                    <button type="button" class="btn btn-primary" id="save-simulation-btn" style="display: none; margin-top: 20px;">üíæ Aggiorna Simulazione</button>
                </div>
            </div>
            
            <div class="actions">
                <a href="/student/{{ student.id }}" class="btn btn-secondary">Torna allo Studente</a>
            </div>

<!-- Loading Overlay -->
<div id="loading-overlay" style="display: none;">
    <div class="loading-container">
        <div class="loading-ring"></div>
        <img src="/logo.png" alt="Loading" class="loading-logo">
    </div>
</div>

<!-- Modale Avviso Disciplina -->
<div class="modal-overlay" id="discipline-warning-modal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h3>‚ö†Ô∏è Avviso</h3>
            <button class="modal-close" onclick="closeDisciplineWarningModal()">&times;</button>
        </div>
        <div class="modal-body">
            <p>Deve rimanere almeno una disciplina.</p>
        </div>
        <div class="modal-footer">
            <button class="btn btn-primary" onclick="closeDisciplineWarningModal()">OK</button>
        </div>
    </div>
</div>

<!-- Modale Nessuna Simulazione da Salvare -->
<div class="modal-overlay" id="no-simulation-modal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h3>‚ö†Ô∏è Nessuna Simulazione</h3>
            <button class="modal-close" onclick="closeNoSimulationModal()">&times;</button>
        </div>
        <div class="modal-body">
            <p>Nessuna simulazione da salvare. Esegui prima una simulazione.</p>
        </div>
        <div class="modal-footer">
            <button class="btn btn-primary" onclick="closeNoSimulationModal()">OK</button>
        </div>
    </div>
</div>

<style>
    .student-info {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 30px;
    }
    
    .student-info h2 {
        color: #E57552;
        margin-bottom: 15px;
    }
    
    .student-info p {
        margin: 5px 0;
        color: #444;
    }
    
    .breadcrumb {
        margin-bottom: 20px;
        color: #666;
    }
    
    .breadcrumb a {
        color: #E57552;
        text-decoration: none;
    }
    
    .breadcrumb a:hover {
        text-decoration: underline;
    }
    
    /* Simulatore Styles (stesso stile di new.html.twig) */
    .simulator-container {
        margin-top: 40px;
        padding: 30px;
        background: #f8f9fa;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .simulator-title {
        color: #E57552;
        font-size: 28px;
        font-weight: 600;
        margin-bottom: 30px;
        text-align: center;
    }
    
    .simulator-section {
        background: white;
        padding: 25px;
        border-radius: 8px;
        margin-bottom: 25px;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #333;
    }
    
    .required {
        color: #e74c3c;
    }
    
    .form-group select,
    .form-group input {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.3s;
    }
    
    .form-group select:focus,
    .form-group input:focus {
        outline: none;
        border-color: #E57552;
        box-shadow: 0 0 0 2px rgba(229, 117, 82, 0.2);
    }
    
    .form-group select:disabled {
        background-color: #f8f9fa;
        color: #6c757d;
        cursor: not-allowed;
        opacity: 0.7;
    }
    
    .discipline-row {
        display: flex;
        gap: 15px;
        align-items: flex-start;
        margin-bottom: 15px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 6px;
        border: 1px solid #e9ecef;
    }
    
    .discipline-row .form-group {
        flex: 1;
        margin-bottom: 0;
    }
    
    .discipline-row .form-group:first-child {
        flex: 0 0 200px;
    }
    
    .discipline-row .form-group:last-child {
        flex: 0 0 100px;
    }
    
    .btn-remove-discipline {
        background: #dc3545;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        height: 40px;
        align-self: flex-start;
        margin-top: 35px;
    }
    
    .btn-remove-discipline:hover {
        background: #c82333;
    }
    
    .error-message {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
        display: none;
    }
    
    .btn-add-discipline {
        background: #28a745;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        margin-bottom: 20px;
        transition: background-color 0.3s;
    }
    
    .btn-add-discipline:hover {
        background: #218838;
    }
    
    .btn-simulate {
        background: #28a745;
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        transition: background-color 0.3s;
    }
    
    .btn-simulate:hover {
        background: #20c997;
    }
    
    .results-container {
        background: white;
        padding: 25px;
        border-radius: 8px;
        margin-top: 25px;
        display: none;
    }
    
    .table-section {
        margin-bottom: 30px;
    }
    
    .table-section h4 {
        color: #E57552;
        margin-bottom: 15px;
        font-size: 18px;
    }
    
    .results-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-bottom: 15px;
    }
    
    .results-table th {
        background: #E57552;
        color: white;
        padding: 12px;
        text-align: left;
        font-weight: 600;
    }
    
    .results-table td {
        padding: 12px;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .results-table tr:nth-child(even) td {
        background-color: #f8f9fa;
    }
    
    .pagination {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 15px;
    }
    
    .pagination button {
        padding: 8px 12px;
        border: 1px solid #ddd;
        background: white;
        cursor: pointer;
        border-radius: 4px;
    }
    
    .pagination button:hover {
        background: #f8f9fa;
    }
    
    .pagination button.active {
        background: #379975;
        color: white;
        border-color: #379975;
    }
    
    .pagination button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    /* Stili per intestazioni cliccabili */
    .sortable-header {
        cursor: pointer;
        user-select: none;
        position: relative;
        transition: background-color 0.2s;
    }
    
    
    .sortable-header::after {
        content: ' ‚Üï';
        opacity: 0.5;
        font-size: 12px;
    }
    
    .sortable-header.sort-asc::after {
        content: ' ‚Üë';
        opacity: 1;
        color: #fff;
    }
    
    .sortable-header.sort-desc::after {
        content: ' ‚Üì';
        opacity: 1;
        color: #fff;
    }
    
    /* Stili per stati risultati */
    .stato-tot {
        background-color: #d4edda !important;
        color: #155724 !important;
        padding: 4px 8px;
        border-radius: 4px;
        font-weight: 600;
    }
    .stato-parziale {
        background-color: #fff3cd !important;
        color: #856404 !important;
        padding: 4px 8px;
        border-radius: 4px;
        font-weight: 600;
    }
    .stato-non {
        background-color: #f8d7da !important;
        color: #721c24 !important;
        padding: 4px 8px;
        border-radius: 4px;
        font-weight: 600;
    }
    
    /* Stili Select2 per mantenere dimensioni corrette */
    .select2-container {
        width: 100% !important;
    }
    .select2-container--default .select2-selection--single {
        height: 40px !important;
        border: 1px solid #ddd !important;
        border-radius: 4px !important;
        font-size: 14px !important;
    }
    .select2-container--default .select2-selection--single .select2-selection__rendered {
        line-height: 38px !important;
        padding-left: 12px !important;
        color: #333 !important;
    }
    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 38px !important;
        right: 8px !important;
    }
    .select2-dropdown {
        border: 1px solid #ddd !important;
        border-radius: 4px !important;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
    }
    .select2-results__option {
        padding: 8px 12px !important;
        font-size: 14px !important;
    }
    .select2-results__option--highlighted {
        background-color: #E57552 !important;
        color: white !important;
    }
    
    /* Loading Overlay */
    #loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.95);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }
    
    .loading-container {
        width: 120px;
        height: 120px;
        position: relative;
        margin: 0 auto;
    }
    
    .loading-logo {
        width: 50px;
        height: 25px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        animation: pulse 1.5s ease-in-out infinite;
    }
    
    .loading-ring {
        width: 120px;
        height: 120px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #E57552;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    @keyframes pulse {
        0%, 100% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        50% { opacity: 0.7; transform: translate(-50%, -50%) scale(1.1); }
    }
    
    .actions {
        margin-top: 30px;
        text-align: center;
    }
    
    /* Stili per errori di validazione */
    .field-error {
        border-color: #dc3545 !important;
    }
    
    .field-error-message {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
    }
    
    .btn {
        display: inline-block;
        padding: 12px 24px;
        margin: 0 10px;
        text-decoration: none;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s;
    }
    
    .btn-primary {
        background: #379975;
        color: white;
        border: none;
        cursor: pointer;
    }
    
    .btn-primary:hover {
        background: #2d7a5f;
    }
    
    .btn-secondary {
        background: #6c757d;
        color: white;
    }
    
    .btn-secondary:hover {
        background: #5a6268;
    }
</style>

<script>
    // Variabili globali
    let currentCdl = '';
    let currentResults = null;
    // Dati SSD pre-caricati dal controller (evita chiamate AJAX lente)
    const allSsdData = {{ allSsdData|json_encode|raw }};
    const studentId = {{ student.id }};
    const simulationId = {{ simulation.id }};
    
    // Inizializzazione
    document.addEventListener('DOMContentLoaded', function() {
        // Blocca tutti i submit di form per evitare refresh
        document.addEventListener('submit', function(e) {
            console.log('üö´ Bloccato submit di form:', e.target);
            e.preventDefault();
            e.stopPropagation();
            return false;
        });
        
        console.log('üöÄ Inizializzazione simulatore...');
        console.log('jQuery disponibile:', typeof $ !== 'undefined');
        console.log('Select2 disponibile:', typeof $ !== 'undefined' && $.fn.select2);
        
        // Aggiungi event listeners per ordinamento tabelle (solo se necessario)
        setupSortableHeaders();
        
        // Il campo CDL √® disabilitato, non inizializziamo Select2
        console.log('‚ÑπÔ∏è Campo CDL disabilitato per visualizzazione simulazione');
        
        // Imposta il CDL corrente se c'√® una simulazione
        const cdlSelect = document.getElementById('simulator-cdl');
        if (cdlSelect && cdlSelect.value) {
            currentCdl = cdlSelect.value;
            console.log('üéì CDL corrente:', currentCdl);
        }
        
        // Event listeners
        document.getElementById('add-discipline').addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            addDisciplineRow();
        });
        document.getElementById('simulate-btn').addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            console.log('üö´ Bloccato comportamento di default del pulsante');
            simulate();
            return false;
        });
        document.getElementById('save-simulation-btn').addEventListener('click', saveSimulation);
        
        // Carica i dati della simulazione (i dati SSD sono gi√† disponibili dal controller)
        loadSimulationData();
    });
    
    
    // Gestisce il cambio di CDL
    function handleCdlChange() {
        const cdlSelect = document.getElementById('simulator-cdl');
        const selectedCdl = cdlSelect.value;
        
        console.log('üîÑ CDL cambiato:', selectedCdl);
        
        if (!selectedCdl) {
            // Nascondi sezione discipline
            document.getElementById('discipline-rows').style.display = 'none';
            document.getElementById('add-discipline').style.display = 'none';
            return;
        }
        
        currentCdl = selectedCdl;
        
        // Mostra sezione discipline
        document.getElementById('discipline-rows').style.display = 'block';
        document.getElementById('add-discipline').style.display = 'block';
        
        // Aggiorna tutte le select SSD esistenti
        updateAllSsdSelects();
        
        // Se non ci sono discipline, aggiungi 3 righe di default
        const disciplineRows = document.getElementById('discipline-rows');
        if (disciplineRows.children.length === 0) {
            console.log('‚ûï Aggiungendo 3 righe di default per discipline');
            for (let i = 0; i < 3; i++) {
                addDisciplineRow();
            }
        }
    }
    
    // Aggiorna tutte le select SSD
    function updateAllSsdSelects() {
        const ssdSelects = document.querySelectorAll('.ssd-select');
        console.log('üîÑ Aggiornando', ssdSelects.length, 'select SSD');
        ssdSelects.forEach((select, index) => {
            console.log(`üîÑ Aggiornando select SSD ${index + 1}`);
            updateSsdSelect(select);
        });
    }
    
    // Aggiorna una singola select SSD
    function updateSsdSelect(select) {
        console.log('üîÑ Aggiornando select SSD');
        
        // Distruggi Select2 se esiste
        if (typeof $ !== 'undefined' && $(select).hasClass('select2-hidden-accessible')) {
            $(select).select2('destroy');
        }
        
        // Pulisci opzioni
        select.innerHTML = '<option value="">Seleziona SSD</option>';
        
        // Aggiungi opzioni dalle SSD passate dal controller
        const ssdOptions = {{ ssdOptions|json_encode|raw }};
        console.log('üìö SSD disponibili dal template:', ssdOptions);
        
        if (ssdOptions && ssdOptions.length > 0) {
            ssdOptions.forEach((ssd, index) => {
                console.log(`üìñ SSD ${index + 1}:`, ssd);
                const option = document.createElement('option');
                option.value = ssd.riconoscibile;
                option.textContent = ssd.riconoscibile;
                select.appendChild(option);
            });
            console.log(`‚úÖ Caricate ${ssdOptions.length} opzioni SSD dal template`);
        } else {
            console.log('‚ö†Ô∏è Nessuna opzione SSD disponibile dal template, carico dinamicamente...');
            // Se non ci sono dati SSD dal template, caricali dinamicamente
            loadSsdForCurrentCdl(select);
        }
        
        // Reinizializza Select2 solo se jQuery √® disponibile
        if (typeof $ !== 'undefined' && $.fn.select2) {
            $(select).select2({
                placeholder: 'Seleziona SSD',
                allowClear: true,
                minimumResultsForSearch: 1
            });
            console.log('‚úÖ Select2 reinizializzato per SSD');
            
            // Se c'√® un valore selezionato, aggiorna la visualizzazione
            if (select.value) {
                $(select).trigger('change');
            }
        }
    }
    
    // Carica SSD per il CDL corrente usando i dati pre-caricati dal controller
    function loadSsdForCurrentCdl(select) {
        if (!currentCdl) {
            console.log('‚ö†Ô∏è Nessun CDL selezionato, non posso caricare SSD');
            return;
        }
        
        console.log(`üîÑ Caricamento SSD per CDL: ${currentCdl}`);
        console.log('üìö Dati SSD disponibili:', allSsdData);
        
        // Usa i dati pre-caricati dal controller
        if (allSsdData && allSsdData[currentCdl]) {
            console.log('üìö Usando dati SSD pre-caricati dal controller');
            const ssdData = allSsdData[currentCdl];
            
            if (ssdData && ssdData.length > 0) {
                // Aggiungi le opzioni SSD
                ssdData.forEach((ssd, index) => {
                    const option = document.createElement('option');
                    option.value = ssd.id;
                    option.textContent = ssd.text;
                    select.appendChild(option);
                });
                
                // Aggiorna Select2 se √® inizializzato
                if (typeof $ !== 'undefined' && $(select).hasClass('select2-hidden-accessible')) {
                    $(select).trigger('change');
                }
                
                console.log(`‚úÖ Caricate ${ssdData.length} opzioni SSD dai dati pre-caricati`);
            } else {
                console.log('‚ö†Ô∏è Nessuna opzione SSD trovata per questo CDL nei dati pre-caricati');
                // Aggiungi un'opzione di errore
                const errorOption = document.createElement('option');
                errorOption.value = '';
                errorOption.textContent = '‚ö†Ô∏è Nessuna disciplina disponibile per questo corso';
                errorOption.disabled = true;
                select.appendChild(errorOption);
            }
        } else {
            console.log('‚ö†Ô∏è Nessun dato SSD disponibile per il CDL:', currentCdl);
            // Aggiungi un'opzione di errore
            const errorOption = document.createElement('option');
            errorOption.value = '';
            errorOption.textContent = '‚ö†Ô∏è Nessuna disciplina disponibile per questo corso';
            errorOption.disabled = true;
            select.appendChild(errorOption);
        }
    }
    
    // Aggiunge una riga di disciplina
    function addDisciplineRow() {
        const container = document.getElementById('discipline-rows');
        const rowIndex = container.children.length + 1;
        
        console.log(`‚ûï Aggiungendo riga disciplina ${rowIndex}`);
        
        const row = document.createElement('div');
        row.className = 'discipline-row';
        row.innerHTML = `
            <div class="form-group">
                <label>SSD <span class="required">*</span></label>
                <select class="ssd-select" name="ssd_${rowIndex}">
                    <option value="">Seleziona SSD</option>
                </select>
                <div class="error-message" id="ssd_${rowIndex}_error"></div>
            </div>
            <div class="form-group">
                <label>Nome Disciplina <span class="required">*</span></label>
                <input type="text" name="nome_${rowIndex}" placeholder="Nome della disciplina">
                <div class="error-message" id="nome_${rowIndex}_error"></div>
            </div>
            <div class="form-group">
                <label>CFU <span class="required">*</span></label>
                <input type="number" name="cfu_${rowIndex}" min="1" max="30" placeholder="CFU">
                <div class="error-message" id="cfu_${rowIndex}_error"></div>
            </div>
            <button type="button" class="btn-remove-discipline" onclick="removeDisciplineRow(this)">üóëÔ∏è</button>
        `;
        
        container.appendChild(row);
        
        // Aggiorna la select SSD
        const ssdSelect = row.querySelector('.ssd-select');
        updateSsdSelect(ssdSelect);
        
        // Aggiungi event listeners per pulire errori
        const inputs = row.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('focus', () => clearError(`${input.name}_error`));
            input.addEventListener('change', () => clearError(`${input.name}_error`));
        });
        
        // Event listener per select SSD (usando Select2 se disponibile)
        if (ssdSelect) {
            if (typeof $ !== 'undefined' && $.fn.select2) {
                $(ssdSelect).on('change', () => clearError(`ssd_${rowIndex}_error`));
            } else {
                ssdSelect.addEventListener('change', () => clearError(`ssd_${rowIndex}_error`));
            }
        }
        
        console.log(`‚úÖ Aggiunta riga disciplina ${rowIndex}`);
    }
    
    // Rimuove una riga di disciplina
    function removeDisciplineRow(button) {
        const row = button.closest('.discipline-row');
        const container = document.getElementById('discipline-rows');
        
        console.log('üóëÔ∏è Tentativo rimozione riga disciplina');
        
        if (container.children.length > 1) {
            row.remove();
            console.log('‚úÖ Riga disciplina rimossa');
        } else {
            console.log('‚ö†Ô∏è Tentativo di rimuovere l\'ultima disciplina');
            showDisciplineWarningModal();
        }
    }
    
    // Carica i dati della simulazione
    function loadSimulationData() {
        console.log('üîÑ Caricamento dati simulazione dal template');
        
        // I dati sono gi√† disponibili nel template
        const simulationData = {
            cdl: '{{ simulation.cdl }}',
            inputData: {{ simulation.inputData|json_encode|raw }},
            outputDetail: {{ simulation.detailResults|json_encode|raw }},
            outputSummary: {{ simulation.summaryResults|json_encode|raw }},
            outputLeftovers: {{ simulation.leftoverResults|json_encode|raw }}
        };
        
        console.log('üìã Dati simulazione caricati:', simulationData);
        
        // Se c'√® un CDL, mostra le discipline
        if (simulationData.cdl) {
            currentCdl = simulationData.cdl;
            console.log('üéì CDL corrente:', currentCdl);
            
            // Mostra sezione discipline
            document.getElementById('discipline-rows').style.display = 'block';
            document.getElementById('add-discipline').style.display = 'block';
            
            // Precompila le discipline esterne
            if (simulationData.inputData && simulationData.inputData.length > 0) {
                console.log('üìö Discipline da caricare:', simulationData.inputData);
                
                // Pulisci le righe esistenti
                const disciplineRows = document.getElementById('discipline-rows');
                disciplineRows.innerHTML = '';
                
                // Aggiungi le discipline dalla simulazione
                simulationData.inputData.forEach((discipline, index) => {
                    console.log(`üìñ Caricamento disciplina ${index + 1}:`, discipline);
                    addDisciplineRow();
                });
                
                // Aspetta che Select2 sia inizializzato, poi precompila i valori
                setTimeout(() => {
                    simulationData.inputData.forEach((discipline, index) => {
                        const rows = document.querySelectorAll('.discipline-row');
                        const row = rows[index];
                        
                        if (row) {
                            const ssdSelect = row.querySelector('.ssd-select');
                            const nomeInput = row.querySelector('input[name^="nome_"]');
                            const cfuInput = row.querySelector('input[name^="cfu_"]');
                            
                            if (ssdSelect) {
                                ssdSelect.value = discipline.ssd || '';
                                console.log(`‚úÖ SSD impostato: ${discipline.ssd}`);
                                
                                // Aggiorna Select2 se √® inizializzato
                                if (typeof $ !== 'undefined' && $(ssdSelect).hasClass('select2-hidden-accessible')) {
                                    $(ssdSelect).trigger('change');
                                }
                            }
                            if (nomeInput) {
                                nomeInput.value = discipline.nome || '';
                                console.log(`‚úÖ Nome impostato: ${discipline.nome}`);
                            }
                            if (cfuInput) {
                                cfuInput.value = discipline.cfu || '';
                                console.log(`‚úÖ CFU impostato: ${discipline.cfu}`);
                            }
                        }
                    });
                }, 100);
            } else {
                console.log('‚ö†Ô∏è Nessuna disciplina da caricare, aggiungo 3 righe di default');
                // Se non ci sono discipline, aggiungi 3 righe di default
                for (let i = 0; i < 3; i++) {
                    addDisciplineRow();
                }
                
                // Assicurati che le select SSD siano popolate
                setTimeout(() => {
                    const ssdSelects = document.querySelectorAll('.ssd-select');
                    ssdSelects.forEach(select => {
                        if (select.options.length <= 1) { // Solo l'opzione placeholder
                            console.log('üîÑ Popolando select SSD vuota...');
                            updateSsdSelect(select);
                        }
                    });
                }, 200);
            }
            
            // Mostra i risultati esistenti
            if (simulationData.outputDetail || simulationData.outputSummary || simulationData.outputLeftovers) {
                console.log('üìä Mostrando risultati esistenti');
                
                displayResults({
                    detail: simulationData.outputDetail,
                    summary: simulationData.outputSummary,
                    leftovers: simulationData.outputLeftovers
                });
                
                // Mostra il pulsante salva simulazione
                document.getElementById('save-simulation-btn').style.display = 'block';
            } else {
                console.log('‚ö†Ô∏è Nessun risultato da mostrare');
            }
        }
    }
    
    // Simula
    async function simulate() {
        console.log('üöÄ Avvio simulazione...');
        
        if (!validateForm()) {
            console.log('‚ùå Validazione fallita');
            return;
        }
        
        showLoading();
        
        try {
            const data = {
                cdl: currentCdl,
                discipline: getDisciplineData()
            };
            
            console.log('üì§ Invio dati simulazione:', data);
            
            const response = await fetch('/api/simulate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            console.log('üì• Risposta simulazione:', result);
            
            if (result.success) {
                console.log('‚úÖ Simulazione completata con successo');
                currentResults = result.data;
                displayResults(result.data);
                console.log('‚úÖ DisplayResults completato');
            } else {
                console.log('‚ùå Errore nella simulazione:', result.error);
                
                // Gestisci errori di validazione lato server
                if (result.details && typeof result.details === 'object') {
                    console.log('üîç Mostrando errori di validazione lato server:', result.details);
                    showServerValidationErrors(result.details);
                } else {
                    alert('Errore nella simulazione: ' + (result.error || 'Errore sconosciuto'));
                }
            }
        } catch (error) {
            console.error('‚ùå Errore simulazione:', error);
            alert('Errore nella simulazione: ' + error.message);
        } finally {
            hideLoading();
        }
    }
    
    // Valida il form
    function validateForm() {
        let isValid = true;
        let firstErrorElement = null;
        
        console.log('üîç Validando form...');
        
        // Pulisci errori precedenti
        clearAllErrors();
        
        // Valida CDL
        const cdlSelect = document.getElementById('simulator-cdl');
        if (!cdlSelect || !cdlSelect.value || cdlSelect.value.trim() === '') {
            console.log('‚ùå CDL non selezionato');
            showError('cdl-error', 'Seleziona un corso di laurea valido per procedere con la simulazione.');
            if (!firstErrorElement) firstErrorElement = cdlSelect;
            isValid = false;
        }
        
        // Valida discipline
        const rows = document.querySelectorAll('.discipline-row');
        console.log('üîç Validando', rows.length, 'righe discipline');
        
        if (rows.length === 0) {
            console.log('‚ùå Nessuna disciplina inserita');
            showError('discipline-error', 'Inserisci almeno una disciplina esterna.');
            isValid = false;
        }
        
        rows.forEach((row, index) => {
            const ssdSelect = row.querySelector('.ssd-select');
            const nomeInput = row.querySelector('input[name^="nome_"]');
            const cfuInput = row.querySelector('input[name^="cfu_"]');
            
            // Estrai il numero della disciplina dal name del campo
            const ssdName = ssdSelect ? ssdSelect.name : '';
            const disciplineNumber = ssdName ? ssdName.split('_')[1] : (index + 1);
            
            // Valida SSD
            if (!ssdSelect || !ssdSelect.value || ssdSelect.value.trim() === '') {
                console.log(`‚ùå SSD mancante per riga ${index + 1}`);
                showError(`ssd_${disciplineNumber}_error`, 'Seleziona il settore scientifico disciplinare della materia che hai sostenuto.');
                if (!firstErrorElement) firstErrorElement = ssdSelect;
                isValid = false;
            }
            
            // Valida Nome
            if (!nomeInput || !nomeInput.value || nomeInput.value.trim() === '') {
                console.log(`‚ùå Nome mancante per riga ${index + 1}`);
                showError(`nome_${disciplineNumber}_error`, 'Inserisci il nome completo della disciplina che hai sostenuto.');
                if (!firstErrorElement) firstErrorElement = nomeInput;
                isValid = false;
            }
            
            // Valida CFU
            const cfuValue = cfuInput ? parseInt(cfuInput.value) : 0;
            if (!cfuInput || !cfuInput.value || cfuValue < 1 || cfuValue > 30 || isNaN(cfuValue)) {
                console.log(`‚ùå CFU non validi per riga ${index + 1}:`, cfuInput ? cfuInput.value : 'campo non trovato');
                showError(`cfu_${disciplineNumber}_error`, 'Inserisci il numero di crediti formativi universitari (CFU) della disciplina (1-30).');
                if (!firstErrorElement) firstErrorElement = cfuInput;
                isValid = false;
            }
        });
        
        // Scroll al primo errore
        if (!isValid && firstErrorElement) {
            firstErrorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        
        console.log('üîç Validazione completata:', isValid ? '‚úÖ' : '‚ùå');
        return isValid;
    }
    
    // Mostra errore sotto un campo
    function showError(errorId, message) {
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            
            // Aggiungi classe error al campo corrispondente
            const fieldName = errorId.replace('_error', '');
            let targetField = null;
            
            if (fieldName === 'cdl') {
                targetField = document.getElementById('simulator-cdl');
            } else if (fieldName.startsWith('ssd_')) {
                const index = fieldName.split('_')[1];
                const row = document.querySelectorAll('.discipline-row')[index - 1];
                if (row) targetField = row.querySelector('.ssd-select');
            } else if (fieldName.startsWith('nome_')) {
                const index = fieldName.split('_')[1];
                const row = document.querySelectorAll('.discipline-row')[index - 1];
                if (row) targetField = row.querySelector('input[name^="nome_"]');
            } else if (fieldName.startsWith('cfu_')) {
                const index = fieldName.split('_')[1];
                const row = document.querySelectorAll('.discipline-row')[index - 1];
                if (row) targetField = row.querySelector('input[name^="cfu_"]');
            }
            
            if (targetField) {
                targetField.classList.add('field-error');
            }
        }
    }
    
    // Pulisci tutti gli errori
    function clearAllErrors() {
        // Rimuovi classi di errore
        document.querySelectorAll('.field-error').forEach(field => {
            field.classList.remove('field-error');
        });
        
        // Nascondi messaggi di errore
        document.querySelectorAll('.error-message').forEach(error => {
            error.style.display = 'none';
            error.textContent = '';
        });
    }
    
    // Mostra errori di validazione lato server
    function showServerValidationErrors(errors) {
        console.log('üîç Mostrando errori server:', errors);
        
        // Pulisci errori precedenti
        clearAllErrors();
        
        let firstErrorElement = null;
        
        // Mostra ogni errore
        Object.keys(errors).forEach(fieldKey => {
            const errorMessage = errors[fieldKey];
            console.log(`‚ùå Errore campo ${fieldKey}:`, errorMessage);
            
            let targetField = null;
            let errorId = '';
            
            if (fieldKey === 'cdl') {
                targetField = document.getElementById('simulator-cdl');
                errorId = 'cdl-error';
            } else if (fieldKey.startsWith('discipline_')) {
                // Gestisci errori delle discipline (es: discipline_0_ssd, discipline_1_cfu, etc.)
                const parts = fieldKey.split('_');
                const disciplineIndex = parts[1];
                const fieldType = parts[2]; // ssd, nome, cfu
                
                const rows = document.querySelectorAll('.discipline-row');
                const row = rows[disciplineIndex];
                
                if (row) {
                    if (fieldType === 'ssd') {
                        targetField = row.querySelector('.ssd-select');
                        errorId = `ssd_${parseInt(disciplineIndex) + 1}_error`;
                    } else if (fieldType === 'nome') {
                        targetField = row.querySelector('input[name^="nome_"]');
                        errorId = `nome_${parseInt(disciplineIndex) + 1}_error`;
                    } else if (fieldType === 'cfu') {
                        targetField = row.querySelector('input[name^="cfu_"]');
                        errorId = `cfu_${parseInt(disciplineIndex) + 1}_error`;
                    }
                }
            } else if (fieldKey === 'discipline') {
                // Errore generale per le discipline
                const firstRow = document.querySelector('.discipline-row');
                if (firstRow) {
                    targetField = firstRow.querySelector('.ssd-select');
                    errorId = 'ssd_1_error';
                }
            }
            
            if (targetField) {
                targetField.classList.add('field-error');
                showError(errorId, errorMessage);
                
                if (!firstErrorElement) {
                    firstErrorElement = targetField;
                }
            }
        });
        
        // Scroll al primo errore
        if (firstErrorElement) {
            firstErrorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }
    
    // Ottiene i dati delle discipline
    function getDisciplineData() {
        const rows = document.querySelectorAll('.discipline-row');
        const data = [];
        
        console.log('üìö Raccogliendo dati discipline da', rows.length, 'righe');
        
        rows.forEach((row, index) => {
            const ssdSelect = row.querySelector('.ssd-select');
            const nomeInput = row.querySelector('input[name^="nome_"]');
            const cfuInput = row.querySelector('input[name^="cfu_"]');
            
            if (ssdSelect && nomeInput && cfuInput && 
                ssdSelect.value && nomeInput.value && cfuInput.value) {
                const discipline = {
                    ssd: ssdSelect.value,
                    nome: nomeInput.value.trim(),
                    cfu: parseInt(cfuInput.value)
                };
                data.push(discipline);
                console.log(`üìñ Disciplina ${index + 1}:`, discipline);
            }
        });
        
        console.log('üìö Totale discipline valide:', data.length);
        return data;
    }

    // Funzione per ordinare i dati per colonna
    function sortDataByColumn(data, column, direction = 'asc') {
        if (!data || !Array.isArray(data)) return data;

        return data.sort((a, b) => {
            let valueA = a[column];
            let valueB = b[column];

            // Gestione speciale per diversi tipi di dati
            if (column === 'priorita' || column === 'cfu_richiesti' || column === 'cfu_assegnati' || 
                column === 'cfu_riconosciuti' || column === 'integrativi_richiesti' || column === 'cfu_residui') {
                // Per numeri
                valueA = parseInt(valueA) || 0;
                valueB = parseInt(valueB) || 0;
            } else if (column === 'stato') {
                // Per stato: TOT > PARZIALE > NON
                const priority = { 'tot': 1, 'parziale': 2, 'non': 3 };
                valueA = priority[valueA?.toLowerCase()] || 4;
                valueB = priority[valueB?.toLowerCase()] || 4;
            } else {
                // Per stringhe
                valueA = (valueA || '').toString().toLowerCase();
                valueB = (valueB || '').toString().toLowerCase();
            }

            if (direction === 'asc') {
                return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;
            } else {
                return valueA > valueB ? -1 : valueA < valueB ? 1 : 0;
            }
        });
    }

    // Funzione per gestire il click sulle intestazioni
    function handleHeaderClick(tableId, column) {
        const table = document.getElementById(tableId);
        const header = table.querySelector(`th[data-sort="${column}"]`);
        
        // Determina la direzione dell'ordinamento PRIMA di rimuovere le classi
        let direction = 'asc';
        if (header.classList.contains('sort-asc')) {
            direction = 'desc';
        } else if (header.classList.contains('sort-desc')) {
            direction = 'asc';
        }
        
        // Rimuovi classi di ordinamento da tutte le intestazioni di questa tabella
        table.querySelectorAll('th.sortable-header').forEach(th => {
            th.classList.remove('sort-asc', 'sort-desc');
        });

        // Aggiungi la classe appropriata all'header corrente
        if (direction === 'asc') {
            header.classList.add('sort-asc');
        } else {
            header.classList.add('sort-desc');
        }

        // Ordina i dati
        const currentData = window.currentResults[tableId.replace('-table', '')] || [];
        const sortedData = sortDataByColumn([...currentData], column, direction);
        
        // Aggiorna i risultati
        window.currentResults[tableId.replace('-table', '')] = sortedData;
        
        // Ridisegna la tabella
        displayTable(tableId, sortedData, tableId.replace('-table', '-pagination'));
    }
    
    // Funzione per configurare header ordinabili solo se necessario
    function setupSortableHeaders() {
        // Questa funzione verr√† chiamata dopo che i risultati sono stati caricati
        // per determinare se attivare l'ordinamento
    }

    // Funzione per attivare/disattivare ordinamento basato sul numero di elementi
    function updateSortableHeaders() {
        const tables = ['detail-table', 'summary-table', 'leftover-table'];
        
        tables.forEach(tableId => {
            const table = document.getElementById(tableId);
            if (!table) return;
            
            const dataKey = tableId.replace('-table', '');
            const dataCount = window.currentResults ? (window.currentResults[dataKey] || []).length : 0;
            
            // Se ci sono pi√π di 5 elementi, attiva l'ordinamento
            if (dataCount > 5) {
                table.querySelectorAll('th').forEach(th => {
                    th.classList.add('sortable-header');
                    if (!th.getAttribute('data-sort')) {
                        // Aggiungi data-sort se non presente
                        const text = th.textContent.trim();
                        const sortMap = {
                            'Disciplina Unimarconi': 'disciplina_unimarconi',
                            'CFU Richiesti': 'cfu_richiesti',
                            'Disciplina Esterna': 'disciplina_esterna',
                            'CFU Assegnati': 'cfu_assegnati',
                            'Priorit√†': 'priorita',
                            'Stato': 'stato',
                            'Note': 'note',
                            'CFU Riconosciuti': 'cfu_riconosciuti',
                            'Integrativi Richiesti': 'integrativi_richiesti',
                            'CFU Residui': 'cfu_residui',
                            'Motivazione': 'motivazione'
                        };
                        th.setAttribute('data-sort', sortMap[text] || '');
                    }
                });
                
                // Aggiungi event listeners se non gi√† presenti
                table.querySelectorAll('th.sortable-header').forEach(header => {
                    if (!header.hasAttribute('data-sort-listener')) {
                        header.setAttribute('data-sort-listener', 'true');
                        header.addEventListener('click', function() {
                            const column = this.getAttribute('data-sort');
                            handleHeaderClick(tableId, column);
                        });
                    }
                });
            } else {
                // Se 5 o meno elementi, disattiva l'ordinamento
                table.querySelectorAll('th').forEach(th => {
                    th.classList.remove('sortable-header', 'sort-asc', 'sort-desc');
                    th.removeAttribute('data-sort-listener');
                });
            }
        });
    }

    // Mostra risultati
    function displayResults(results) {
        console.log('üìä Displaying results:', results);
        const container = document.getElementById('results-container');
        container.style.display = 'block';
        
        // Salva i risultati per l'ordinamento
        window.currentResults = results;
        
        // Aggiorna configurazione header ordinabili
        updateSortableHeaders();
        
        // Ordina i risultati: Dettaglio per priorit√†, altre per status
        if (results.detail) {
            results.detail = sortResultsByStatus(results.detail, 'detail');
        }
        if (results.summary) {
            results.summary = sortResultsByStatus(results.summary, 'summary');
        }
        
        displayTable('detail-table', results.detail, 'detail-pagination');
        displayTable('summary-table', results.summary, 'summary-pagination');
        displayTable('leftover-table', results.leftovers, 'leftover-pagination');
        
        // Mostra pulsante salva simulazione
        document.getElementById('save-simulation-btn').style.display = 'block';
        
        console.log('‚úÖ Risultati mostrati senza refresh');
    }
    
    // Ordina risultati per priorit√† (per tabella Dettaglio) o status (per altre tabelle)
    function sortResultsByStatus(data, tableType = 'summary') {
        if (!data || !Array.isArray(data)) return data;
        
        return data.sort((a, b) => {
            if (tableType === 'detail') {
                // Per la tabella Dettaglio, ordina per priorit√† numerica
                const prioritaA = parseInt(a.priorita) || 999;
                const prioritaB = parseInt(b.priorita) || 999;
                
                // Ordina per priorit√† crescente (1, 2, 3, ...)
                return prioritaA - prioritaB;
            } else {
                // Per le altre tabelle, mantieni l'ordinamento per status
                const statusA = (a.stato && typeof a.stato === 'string') ? a.stato.toLowerCase() : '';
                const statusB = (b.stato && typeof b.stato === 'string') ? b.stato.toLowerCase() : '';
                
                // Priorit√†: TOT > PARZIALE > NON
                const priority = { 'tot': 1, 'parziale': 2, 'non': 3 };
                const priorityA = priority[statusA] || 4;
                const priorityB = priority[statusB] || 4;
                
                return priorityA - priorityB;
            }
        });
    }
    
    // Ottieni l'ultimo valore di un oggetto (per lo status)
    function getLastValue(obj) {
        const values = Object.values(obj);
        return values[values.length - 1] || '';
    }
    
    // Mostra tabella con paginazione
    function displayTable(tableId, data, paginationId, itemsPerPage = 5) {
        console.log(`üìã Displaying table ${tableId} with data:`, data);
        const table = document.getElementById(tableId);
        const tbody = table.querySelector('tbody');
        const pagination = document.getElementById(paginationId);
        
        tbody.innerHTML = '';
        
        if (!data || data.length === 0) {
            const row = tbody.insertRow();
            const cell = row.insertCell();
            cell.colSpan = table.querySelectorAll('th').length;
            cell.textContent = 'Nessun dato disponibile';
            cell.style.textAlign = 'center';
            cell.style.color = '#666';
            pagination.innerHTML = '';
            console.log(`‚ö†Ô∏è Nessun dato per tabella ${tableId}`);
            return;
        }
        
        let currentPage = 1;
        const totalPages = Math.ceil(data.length / itemsPerPage);
        
        function showPage(page) {
            tbody.innerHTML = '';
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, data.length);
            const pageData = data.slice(startIndex, endIndex);
            
            console.log(`üìÑ Showing page ${page} of ${totalPages} for table ${tableId}`);
            
            pageData.forEach((item, itemIndex) => {
                const row = tbody.insertRow();
                
                // Mapping corretto per ogni tabella
                if (tableId === 'detail-table') {
                    // Tabella Dettaglio: Disciplina Unimarconi, CFU Richiesti, Disciplina Esterna, CFU Assegnati, Priorit√†, Stato, Note
                    row.insertCell().textContent = item.disciplina_unimarconi || '';
                    row.insertCell().textContent = item.cfu_richiesti || '';
                    row.insertCell().textContent = item.disciplina_esterna || '';
                    row.insertCell().textContent = item.cfu_assegnati || '';
                    
                    // Colonna Priorit√† con nota per priorit√† 999
                    const prioritaCell = row.insertCell();
                    const priorita = parseInt(item.priorita) || 0;
                    if (priorita === 999) {
                        prioritaCell.innerHTML = `${priorita} <span style="color: #E57552; font-size: 12px;" title="Priorit√† 999: Disciplina non riconosciuta o non disponibile">‚ö†Ô∏è</span>`;
                    } else {
                        prioritaCell.textContent = priorita;
                    }
                    
                    // Colonna Stato
                    const statoCell = row.insertCell();
                    if (item.stato && ['tot', 'parziale', 'non'].includes(item.stato.toLowerCase())) {
                        const span = document.createElement('span');
                        span.textContent = item.stato.toUpperCase();
                        span.className = `stato-${item.stato.toLowerCase()}`;
                        statoCell.appendChild(span);
                    } else {
                        statoCell.textContent = item.stato || '';
                    }
                    
                    // Colonna Note con spiegazione per priorit√† 999
                    const noteCell = row.insertCell();
                    let noteText = item.note || '';
                    if (priorita === 999 && !noteText) {
                        noteText = 'Disciplina non riconosciuta o non disponibile per questo corso di laurea';
                    }
                    noteCell.textContent = noteText;
                } else if (tableId === 'summary-table') {
                    // Tabella Riepilogo: Disciplina Unimarconi, CFU Richiesti, CFU Riconosciuti, Integrativi Richiesti, Stato
                    row.insertCell().textContent = item.disciplina_unimarconi || '';
                    row.insertCell().textContent = item.cfu_richiesti || '';
                    row.insertCell().textContent = item.cfu_riconosciuti || '';
                    row.insertCell().textContent = item.integrativi_richiesti || '';
                    
                    // Ultima colonna: Stato
                    const statusCell = row.insertCell();
                    if (item.stato && ['tot', 'parziale', 'non'].includes(item.stato.toLowerCase())) {
                        const span = document.createElement('span');
                        span.textContent = item.stato.toUpperCase();
                        span.className = `stato-${item.stato.toLowerCase()}`;
                        statusCell.appendChild(span);
                    } else {
                        statusCell.textContent = item.stato || '';
                    }
                } else if (tableId === 'leftover-table') {
                    // Tabella Rimanenze: Disciplina Esterna, CFU Residui, Motivazione
                    row.insertCell().textContent = item.disciplina_esterna || '';
                    row.insertCell().textContent = item.cfu_residui || '';
                    row.insertCell().textContent = item.motivazione || '';
                }
            });
            
            // Paginazione migliorata (massimo 5 pulsanti)
            pagination.innerHTML = '';
            console.log(`Paginazione: pagina ${page} di ${totalPages}`);
            
            if (page > 1) {
                const prevBtn = document.createElement('button');
                prevBtn.textContent = '‚Üê';
                prevBtn.onclick = () => showPage(page - 1);
                pagination.appendChild(prevBtn);
            }
            
            let startPage = Math.max(1, page - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }
            console.log(`Mostrando pagine da ${startPage} a ${endPage}`);
            
            for (let i = startPage; i <= endPage; i++) {
                const pageBtn = document.createElement('button');
                pageBtn.textContent = i;
                pageBtn.className = i === page ? 'active' : '';
                pageBtn.onclick = () => showPage(i);
                pagination.appendChild(pageBtn);
            }
            
            if (page < totalPages) {
                const nextBtn = document.createElement('button');
                nextBtn.textContent = '‚Üí';
                nextBtn.onclick = () => showPage(page + 1);
                pagination.appendChild(nextBtn);
            }
        }
        
        showPage(1);
    }
    
    // Salva simulazione
    async function saveSimulation() {
        if (!currentResults) {
            showNoSimulationModal();
            return;
        }
        
        const saveBtn = document.getElementById('save-simulation-btn');
        saveBtn.style.display = 'none';
        
        // Mostra loading
        showLoading();
        
        try {
            const simulationData = {
                cdl: currentCdl,
                discipline: getDisciplineData(),
                saveSimulation: true,
                studentId: studentId
            };
            
            console.log('üíæ Salvando simulazione:', simulationData);
            
            // Aggiorna simulazione esistente
            const response = await fetch(`/api/simulation/${simulationId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(simulationData)
            });
            
            const result = await response.json();
            console.log('üíæ Risposta salvataggio:', result);
            
            if (result.success) {
                // Nascondi loading
                hideLoading();
                // Refresh della pagina per mostrare il messaggio di successo dalla sessione
                window.location.reload();
            } else {
                hideLoading();
                alert('Errore nel salvataggio: ' + (result.message || 'Errore sconosciuto'));
                saveBtn.style.display = 'block';
            }
        } catch (error) {
            console.error('‚ùå Errore salvataggio:', error);
            hideLoading();
            alert('Errore nel salvataggio della simulazione: ' + error.message);
            saveBtn.style.display = 'block';
        }
    }
    
    // Utility functions
    function hideError(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.style.display = 'none';
        }
    }
    
    function showLoading() {
        document.getElementById('loading-overlay').style.display = 'flex';
    }
    
    function hideLoading() {
        document.getElementById('loading-overlay').style.display = 'none';
    }
    
    // Funzioni per il modale avviso disciplina
    function showDisciplineWarningModal() {
        document.getElementById('discipline-warning-modal').style.display = 'flex';
    }
    
    function closeDisciplineWarningModal() {
        document.getElementById('discipline-warning-modal').style.display = 'none';
    }
    
    // Funzioni per il modale nessuna simulazione
    function showNoSimulationModal() {
        document.getElementById('no-simulation-modal').style.display = 'flex';
    }
    
    function closeNoSimulationModal() {
        document.getElementById('no-simulation-modal').style.display = 'none';
    }
    
    
    // Eventi per nascondere errori quando l'utente interagisce con i campi
    document.addEventListener('DOMContentLoaded', function() {
        // CDL select
        const cdlSelect = document.getElementById('simulator-cdl');
        if (cdlSelect) {
            cdlSelect.addEventListener('change', function() {
                clearError('cdl-error');
            });
        }
        
        // Aggiungi eventi per i campi delle discipline (verranno aggiunti dinamicamente)
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('ssd-select')) {
                const index = Array.from(document.querySelectorAll('.ssd-select')).indexOf(e.target) + 1;
                clearError(`ssd_${index}_error`);
            }
        });
        
        document.addEventListener('input', function(e) {
            if (e.target.name && e.target.name.startsWith('nome_')) {
                const index = e.target.name.split('_')[1];
                clearError(`nome_${index}_error`);
            }
            if (e.target.name && e.target.name.startsWith('cfu_')) {
                const index = e.target.name.split('_')[1];
                clearError(`cfu_${index}_error`);
            }
        });
    });
    
    // Pulisci errore specifico
    function clearError(errorId) {
        const errorElement = document.getElementById(errorId);
        if (errorElement) {
            errorElement.remove();
        }
        
        // Rimuovi classe di errore dal campo
        const fieldName = errorId.replace('_error', '');
        let targetField = null;
        
        if (fieldName === 'cdl') {
            targetField = document.getElementById('simulator-cdl');
        } else if (fieldName.startsWith('ssd_')) {
            const index = fieldName.split('_')[1];
            const row = document.querySelectorAll('.discipline-row')[index - 1];
            if (row) targetField = row.querySelector('.ssd-select');
        } else if (fieldName.startsWith('nome_')) {
            const index = fieldName.split('_')[1];
            const row = document.querySelectorAll('.discipline-row')[index - 1];
            if (row) targetField = row.querySelector('input[name^="nome_"]');
        } else if (fieldName.startsWith('cfu_')) {
            const index = fieldName.split('_')[1];
            const row = document.querySelectorAll('.discipline-row')[index - 1];
            if (row) targetField = row.querySelector('input[name^="cfu_"]');
        }
        
        if (targetField) {
            targetField.classList.remove('field-error');
        }
    }
</script>
{% endblock %}
