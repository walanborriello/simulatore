{% extends 'base.html.twig' %}

{% block title %}Nuovo Studente - Simulatore CFU UniMarconi{% endblock %}

        {% block styles %}
        .form-container {
            max-width: 600px;
            margin: 0 auto;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #444444;
        }
        
        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #379975;
            box-shadow: 0 0 0 2px rgba(55, 153, 117, 0.2);
        }
        
        .required {
            color: #dc3545;
        }
        
        .btn-primary {
            background-color: #379975;
            color: white;
            padding: 12px 24px;
            font-size: 1.1em;
        }
        
        .btn-primary:hover {
            background-color: #2d7a5f;
        }
        
        .btn-large {
            padding: 15px 30px;
            font-size: 1.2em;
            font-weight: 600;
        }
        
        .btn-secondary {
            background-color: #6c757d;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 4px;
            display: inline-block;
        }
        
        .btn-secondary:hover {
            background-color: #5a6268;
            color: white;
            text-decoration: none;
        }
        
        /* CSS per form-actions rimosso */
        
        .final-actions {
            margin-top: 40px;
            padding: 20px;
            text-align: center;
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .final-actions .btn {
            padding: 12px 24px;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 200px;
        }
        
        small {
            color: #666;
            font-size: 0.9em;
        }
        
        /* Simulatore Styles */
        .simulator-container {
            margin-top: 40px;
            padding: 30px;
            background: #f8f9fa;
            border-radius: 12px;
            border: 1px solid #e0e0e0;
        }
        
        .simulator-title {
            color: #E57552;
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .simulator-section {
            margin-bottom: 30px;
        }
        
        .discipline-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            align-items: flex-start;
        }
        
        .discipline-row .form-group {
            margin-bottom: 0;
        }
        
        .discipline-row .form-group:nth-child(1) { flex: 1; }
        .discipline-row .form-group:nth-child(2) { flex: 1; }
        .discipline-row .form-group:nth-child(3) { flex: 0.5; }
        .discipline-row .form-group:nth-child(4) { flex: 0.3; }
        
        .btn-add-discipline {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .btn-add-discipline:hover {
            background: #218838;
        }
        
        .btn-remove-discipline {
            background: #dc3545;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            align-self: flex-start;
            height: 40px; /* Stessa altezza degli input */
            margin-top: 35px;
        }
        
        .btn-remove-discipline:hover {
            background: #c82333;
        }
        
        .btn-simulate {
            background: #28a745;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            margin-top: 20px;
        }
        
        .btn-simulate:hover {
            background: #20c997;
        }
        
        /* CSS per btn-save-simulation rimosso */
        
        .error-message {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
        
        .field-error {
            border-color: #dc3545 !important;
        }
        
        .field-error-message {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
        }
        
                .loading-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(255, 255, 255, 0.95);
                    display: none;
                    justify-content: center;
                    align-items: center;
                    z-index: 9999;
                }
                
                .loading-content {
                    text-align: center;
                }
                
                .loading-container {
                    width: 120px;
                    height: 120px;
                    position: relative;
                    margin: 0 auto;
                }
                
                .loading-logo {
                    width: 50px;
                    height: 25px;
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    animation: pulse 1.5s ease-in-out infinite;
                }
                
                .loading-ring {
                    width: 120px;
                    height: 120px;
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #E57552;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                }
                
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                @keyframes pulse {
                    0%, 100% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                    50% { opacity: 0.7; transform: translate(-50%, -50%) scale(1.1); }
                }
                
                /* Forza visibilit√† search box Select2 */
                .select2-search {
                    display: block !important;
                }
                
                .select2-search__field {
                    width: 100% !important;
                    padding: 8px !important;
                    border: 1px solid #ddd !important;
                    border-radius: 4px !important;
                }
                
                /* Stili Select2 per mantenere dimensioni corrette */
                .select2-container {
                    width: 100% !important;
                }
                
                .select2-container--default .select2-selection--single {
                    height: 40px !important;
                    border: 1px solid #ddd !important;
                    border-radius: 4px !important;
                    font-size: 14px !important;
                }
                
                .select2-container--default .select2-selection--single .select2-selection__rendered {
                    line-height: 38px !important;
                    padding-left: 12px !important;
                    color: #333 !important;
                }
                
                .select2-container--default .select2-selection--single .select2-selection__arrow {
                    height: 38px !important;
                    right: 8px !important;
                }
                
                .select2-dropdown {
                    border: 1px solid #ddd !important;
                    border-radius: 4px !important;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
                }
                
                .select2-results__option {
                    padding: 8px 12px !important;
                    font-size: 14px !important;
                }
                
                .select2-results__option--highlighted {
                    background-color: #E57552 !important;
                    color: white !important;
                }
        
        .results-container {
            margin-top: 30px;
            display: none;
        }
        
        .results-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .results-table th {
            background: #E57552;
            color: white;
            padding: 12px;
            text-align: left;
            font-weight: 600;
        }
        
        .results-table td {
            padding: 12px;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .results-table tr:nth-child(even) td {
            background-color: #f8f9fa;
        }
        
        /* Stili per stati risultati */
        .stato-tot {
            background-color: #d4edda !important;
            color: #155724 !important;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 600;
        }
        
        .stato-parziale {
            background-color: #fff3cd !important;
            color: #856404 !important;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 600;
        }
        
        .stato-non {
            background-color: #f8d7da !important;
            color: #721c24 !important;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 600;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 15px;
        }
        
        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 4px;
        }
        
        .pagination button:hover {
            background: #f8f9fa;
        }
        
        .pagination button.active {
            background: #379975;
            color: white;
            border-color: #379975;
        }
        
        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* Stili per intestazioni cliccabili */
        .sortable-header {
            cursor: pointer;
            user-select: none;
            position: relative;
            transition: background-color 0.2s;
        }
        
        
        .sortable-header::after {
            content: ' ‚Üï';
            opacity: 0.5;
            font-size: 12px;
        }
        
        .sortable-header.sort-asc::after {
            content: ' ‚Üë';
            opacity: 1;
            color: #fff;
        }
        
        .sortable-header.sort-desc::after {
            content: ' ‚Üì';
            opacity: 1;
            color: #fff;
        }
{% endblock %}

{% block content %}
        <h1>Nuovo Studente</h1>
        
        <div class="form-container">
            <form method="POST">
                <div class="form-group">
                    <label for="firstName">Nome <span class="required">*</span></label>
                    <input type="text" id="firstName" name="firstName" required>
                </div>
                
                <div class="form-group">
                    <label for="lastName">Cognome <span class="required">*</span></label>
                    <input type="text" id="lastName" name="lastName" required>
                </div>
                
                <div class="form-group">
                    <label for="email">Email <span class="required">*</span></label>
                    <input type="email" id="email" name="email" required>
                </div>
                
                <div class="form-group">
                    <label for="codiceFiscale">Codice Fiscale <span class="required">*</span></label>
                    <input type="text" id="codiceFiscale" name="codiceFiscale" maxlength="16" required>
                    <small>Inserisci il codice fiscale (16 caratteri)</small>
                </div>
                
                <div class="form-group">
                    <label for="ateneoProvenienza">Ateneo di Provenienza <span class="required">*</span></label>
                    <input type="text" id="ateneoProvenienza" name="ateneoProvenienza" required>
                </div>
                
                <div class="form-group">
                    <label for="corsoStudioInteresse">Corso di Studio di Interesse <span class="required">*</span></label>
                    <input type="text" id="corsoStudioInteresse" name="corsoStudioInteresse" required>
                </div>
                
                <div class="form-group">
                    <label for="phone">Telefono <span class="required">*</span></label>
                    <input type="tel" id="phone" name="phone" required>
                </div>
                
                <div class="form-group">
                    <label for="notes">Note</label>
                    <textarea id="notes" name="notes" rows="4"></textarea>
                </div>
                
            </form>
        </div>
        
        <!-- Simulatore CFU -->
        <div class="simulator-container">
            <h2 class="simulator-title">üéì Simulatore CFU</h2>
            
            <div class="simulator-section">
                <div class="form-group">
                    <label for="simulator-cdl">Seleziona Corso di Laurea <span class="required">*</span></label>
                    <select id="simulator-cdl" name="simulator-cdl">
                        <option value="">Seleziona corso di laurea...</option>
                        {% for cdl in cdlOptions %}
                            <option value="{{ cdl.cdl }}">{{ cdl.cdl }} - {{ cdl.orient }}</option>
                        {% endfor %}
                    </select>
                    <div class="error-message" id="cdl-error"></div>
                </div>
            </div>
            
            <div class="simulator-section" id="discipline-section" style="display: none;">
                <h3 style="color: #E57552; margin-bottom: 20px;">Discipline Esterne da Riconoscere</h3>
                <div id="discipline-rows">
                    <!-- Le righe delle discipline verranno aggiunte dinamicamente -->
                </div>
                <button type="button" class="btn-add-discipline" id="add-discipline">+ Aggiungi Disciplina</button>
                <button type="button" class="btn-simulate" id="simulate-btn" onclick="return false;">Calcola Simulazione</button>
            </div>
            
            <!-- Risultati -->
            <div class="results-container" id="results-container">
                <h3 style="color: #E57552; margin-bottom: 20px;">Risultati Simulazione</h3>
                
                <!-- Legenda Stati -->
                <div class="stato-legend" style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #E57552;">
                    <h5 style="margin: 0 0 10px 0; color: #E57552;">üìã Legenda Stati:</h5>
                    <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                        <div style="display: flex; align-items: center; gap: 5px;">
                            <span class="stato-tot">TOT</span>
                            <span style="font-size: 14px;">= Totale (riconoscimento completo)</span>
                        </div>
                        <div style="display: flex; align-items: center; gap: 5px;">
                            <span class="stato-parziale">PARZIALE</span>
                            <span style="font-size: 14px;">= Parziale (riconoscimento parziale)</span>
                        </div>
                        <div style="display: flex; align-items: center; gap: 5px;">
                            <span class="stato-non">NON</span>
                            <span style="font-size: 14px;">= Non riconosciuto</span>
                        </div>
                    </div>
                </div>
                
                <!-- Tabella 1: Dettaglio -->
                <div id="detail-table-container">
                    <h4>Dettaglio Riconoscimenti</h4>
                    <table class="results-table" id="detail-table">
                        <thead>
                            <tr>
                                <th>Disciplina UniMarconi</th>
                                <th>CFU Richiesti</th>
                                <th>Disciplina Esterna</th>
                                <th>CFU Assegnati</th>
                                <th>Priorit√†</th>
                                <th>Stato</th>
                                <th>Note</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                    <div class="pagination" id="detail-pagination"></div>
                </div>
                
                <!-- Tabella 2: Riepilogo -->
                <div id="summary-table-container">
                    <h4>Riepilogo</h4>
                    
                    <!-- Legenda Stati -->
                    <div class="legend-container" style="background: #f8f9fa; padding: 12px; border-radius: 6px; margin-bottom: 15px; border-left: 4px solid #E57552;">
                        <div style="display: flex; align-items: center; gap: 15px; font-size: 14px; flex-wrap: wrap;">
                            <strong style="color: #E57552;">Legenda Stati:</strong>
                            <span class="stato-tot">TOT</span> = Riconosciuto totalmente
                            <span class="stato-parziale">PARZIALE</span> = Riconosciuto parzialmente  
                            <span class="stato-non">NON</span> = Non riconosciuto
                        </div>
                    </div>
                    <table class="results-table" id="summary-table">
                        <thead>
                            <tr>
                                <th>Disciplina UniMarconi</th>
                                <th>CFU Richiesti</th>
                                <th>CFU Riconosciuti</th>
                                <th>Integrativi Richiesti</th>
                                <th>Stato</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                    <div class="pagination" id="summary-pagination"></div>
                </div>
                
                <!-- Tabella 3: Rimanenze -->
                <div id="leftover-table-container">
                    <h4>Rimanenze</h4>
                    <table class="results-table" id="leftover-table">
                        <thead>
                            <tr>
                                <th>Disciplina Esterna</th>
                                <th>CFU Residui</th>
                                <th>Motivazione</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                    <div class="pagination" id="leftover-pagination"></div>
                </div>
                
                </div>
            </div>
        
        <!-- Pulsanti Finali -->
        <div class="final-actions">
            <button type="button" class="btn btn-primary" id="save-student-simulation-btn" onclick="saveStudentAndSimulation()">
                üíæ Salva Studente e Simulazione
            </button>
            <a href="/" class="btn btn-secondary">
                üè† Torna in Homepage
            </a>
        </div>
        
        <!-- Loading Overlay -->
        <div class="loading-overlay" id="loading-overlay">
            <div class="loading-content">
                <div class="loading-container">
                    <div class="loading-ring"></div>
                    <img src="/logo.png" alt="Loading" class="loading-logo">
                </div>
            </div>
        </div>

        <!-- Modale Avviso Disciplina -->
        <div class="modal-overlay" id="discipline-warning-modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚ö†Ô∏è Avviso</h3>
                    <button class="modal-close" onclick="closeDisciplineWarningModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Deve essere presente almeno una disciplina per procedere con la simulazione.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" onclick="closeDisciplineWarningModal()">OK</button>
                </div>
            </div>
        </div>
        
        <script>
            // Variabili globali
            let disciplineCount = 0;
            let currentCdl = '';
            let ssdOptions = [];
            let currentResults = null;
            // Dati SSD pre-caricati dal controller (evita chiamate AJAX lente)
            const allSsdData = {{ allSsdData|json_encode|raw }};
            
            // Inizializzazione
            document.addEventListener('DOMContentLoaded', function() {
                // Blocca tutti i submit di form per evitare refresh
                document.addEventListener('submit', function(e) {
                    console.log('üö´ Bloccato submit di form:', e.target);
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                });
                console.log('üöÄ Inizializzazione simulatore...');
                console.log('jQuery disponibile:', typeof $ !== 'undefined');
                console.log('Select2 disponibile:', typeof $ !== 'undefined' && $.fn.select2);
                
                // Aggiungi event listeners per ordinamento tabelle (solo se necessario)
                setupSortableHeaders();
                
                // Aggiungi event listeners per pulire errori sui campi del form studente
                const studentFields = ['firstName', 'lastName', 'email', 'phone', 'fiscalCode', 'codiceFiscale', 'ateneoProvenienza', 'corsoStudioInteresse', 'simulator-cdl'];
                studentFields.forEach(fieldId => {
                    const field = document.getElementById(fieldId);
                    if (field) {
                        console.log('üîó Aggiungo event listeners per campo:', fieldId);
                        
                        // Gestione speciale per il campo CDL (select)
                        if (fieldId === 'simulator-cdl') {
                            // Per il select CDL, usa Select2 se disponibile
                            if (typeof $ !== 'undefined' && $.fn.select2) {
                                $(field).on('change', () => {
                                    console.log('üîÑ Change su CDL (Select2):', fieldId);
                                    clearFieldError(field);
                                });
                                $(field).on('select2:open', () => {
                                    console.log('üéØ Apertura Select2 CDL:', fieldId);
                                    clearFieldError(field);
                                });
                            } else {
                                field.addEventListener('change', () => {
                                    console.log('üîÑ Change su CDL (standard):', fieldId);
                                    clearFieldError(field);
                                });
                            }
                            field.addEventListener('focus', () => {
                                console.log('üéØ Focus su CDL:', fieldId);
                                clearFieldError(field);
                            });
                            field.addEventListener('click', () => {
                                console.log('üëÜ Click su CDL:', fieldId);
                                clearFieldError(field);
                            });
                        } else {
                            // Per gli altri campi (input text)
                            field.addEventListener('focus', () => {
                                console.log('üéØ Focus su campo:', fieldId);
                                clearFieldError(field);
                            });
                            field.addEventListener('input', () => {
                                console.log('‚å®Ô∏è Input su campo:', fieldId);
                                clearFieldError(field);
                            });
                            field.addEventListener('change', () => {
                                console.log('üîÑ Change su campo:', fieldId);
                                clearFieldError(field);
                            });
                            field.addEventListener('click', () => {
                                console.log('üëÜ Click su campo:', fieldId);
                                clearFieldError(field);
                            });
                        }
                    } else {
                        console.warn('‚ö†Ô∏è Campo non trovato:', fieldId);
                    }
                });
                
                // I dati SSD sono gi√† disponibili dal controller
                
                if (typeof $ !== 'undefined' && $.fn.select2) {
                    console.log('‚úÖ jQuery e Select2 disponibili, inizializzo...');
                    initializeCdlSelect2();
                } else {
                    console.log('‚ö†Ô∏è jQuery/Select2 non disponibili, le opzioni sono gi√† presenti nel DOM');
                }
                
                addDisciplineRow(); // Riga 1
                addDisciplineRow(); // Riga 2
                addDisciplineRow(); // Riga 3 - Solo per grafica
                
                // Event listeners
                const cdlSelect = document.getElementById('simulator-cdl');
                console.log('üîó Attaccando event listener a CDL select:', cdlSelect);
                
                // Usa l'evento Select2 se disponibile, altrimenti evento standard
                if (typeof $ !== 'undefined' && $.fn.select2) {
                    $(cdlSelect).on('change', handleCdlChange);
                    console.log('‚úÖ Event listener Select2 attaccato');
                } else {
                    cdlSelect.addEventListener('change', handleCdlChange);
                    console.log('‚úÖ Event listener standard attaccato');
                }
                
                document.getElementById('add-discipline').addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    addDisciplineRow();
                });
                document.getElementById('simulate-btn').addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    console.log('üö´ Bloccato comportamento di default del pulsante');
                    simulate();
                    return false;
                });
                // Il pulsante save-simulation-btn √® stato rimosso
            });
            
            
            // Inizializza Select2 per CDL (le opzioni sono gi√† presenti nel DOM)
            function initializeCdlSelect2() {
                    console.log('jQuery disponibile:', typeof $ !== 'undefined');
                    console.log('Select2 disponibile:', typeof $ !== 'undefined' && $.fn.select2);
                
                const cdlSelect = document.getElementById('simulator-cdl');
                const options = cdlSelect.querySelectorAll('option');
                console.log('Opzioni presenti nella select:', options.length);
                    
                    if (typeof $ !== 'undefined' && $.fn.select2) {
                        // Controlla se Select2 √® gi√† inizializzato
                        if ($('#simulator-cdl').hasClass('select2-hidden-accessible')) {
                            console.log('Select2 CDL gi√† inizializzato, distruggo e ricostruisco...');
                            $('#simulator-cdl').select2('destroy');
                        } else {
                            console.log('Select2 CDL non inizializzato, procedo con creazione...');
                        }
                        
                        // Inizializza Select2 con configurazione forzata
                        $('#simulator-cdl').select2({
                            placeholder: 'Seleziona corso di laurea...',
                            allowClear: true,
                            width: '100%',
                            minimumResultsForSearch: 1, // Mostra search box sempre
                            language: {
                                noResults: function() {
                                    return "Nessun risultato trovato";
                                },
                                searching: function() {
                                    return "Ricerca in corso...";
                                }
                            }
                        });
                        
                        // Forza la creazione della search box
                        setTimeout(function() {
                            const searchContainer = $('.select2-search');
                            if (searchContainer.length === 0) {
                                console.log('üîß Forzando creazione search box...');
                                $('.select2-dropdown').prepend('<div class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" placeholder="Cerca..."></div>');
                            }
                        }, 100);
                        
                    console.log('‚úÖ Select2 inizializzato per CDL con search box');
                    } else {
                        console.error('‚ùå jQuery o Select2 non caricati');
                        console.log('jQuery:', typeof $);
                        console.log('Select2:', typeof $ !== 'undefined' ? $.fn.select2 : 'jQuery non disponibile');
                }
            }
            
            // Gestisce cambio CDL
            async function handleCdlChange() {
                console.log('üéØ handleCdlChange chiamata!');
                const cdlSelect = document.getElementById('simulator-cdl');
                const disciplineSection = document.getElementById('discipline-section');
                
                currentCdl = cdlSelect.value;
                console.log('üìã CDL selezionato:', currentCdl);
                
                if (currentCdl) {
                    disciplineSection.style.display = 'block';
                    
                    // Carica SSD (ora sincrono grazie al pre-caricamento)
                    loadSsdOptions(currentCdl);
                    
                    if (ssdOptions.length === 0) {
                        showNoSsdMessage();
                    } else {
                        hideNoSsdMessage();
                        populateAllSsdSelects();
                    }
                    
                    // Scroll lento verso la sezione discipline
                    disciplineSection.scrollIntoView({ behavior: 'smooth' });
                } else {
                    disciplineSection.style.display = 'none';
                }
                
                clearError('cdl-error');
            }
            
            // Carica opzioni SSD per CDL usando i dati pre-caricati dal controller
            function loadSsdOptions(cdl) {
                ssdOptions = allSsdData[cdl] || [];
                console.log(`SSD caricati per ${cdl}:`, ssdOptions.length);
                console.log('üìö Dati SSD disponibili:', allSsdData);
            }
            
            // Popola tutte le select SSD
            function populateAllSsdSelects() {
                const ssdSelects = document.querySelectorAll('.ssd-select');
                ssdSelects.forEach(select => {
                    populateSsdSelect(select);
                });
            }
            
            // Popola una select SSD
            function populateSsdSelect(select) {
                select.innerHTML = '<option value="">Seleziona SSD...</option>';
                ssdOptions.forEach(ssd => {
                    const option = document.createElement('option');
                    option.value = ssd.id;
                    option.textContent = ssd.text;
                    select.appendChild(option);
                });
                
                // Distruggi Select2 esistente e ricostruisci
                console.log('Inizializzando Select2 per SSD...');
                console.log('jQuery disponibile per SSD:', typeof $ !== 'undefined');
                console.log('Select2 disponibile per SSD:', typeof $ !== 'undefined' && $.fn.select2);
                
                // Prova con Select2, fallback a select normale
                if (typeof $ !== 'undefined' && $.fn.select2) {
                    // Controlla se Select2 √® gi√† inizializzato
                    if ($(select).hasClass('select2-hidden-accessible')) {
                        console.log('Select2 SSD gi√† inizializzato, distruggo e ricostruisco...');
                        $(select).select2('destroy');
                    } else {
                        console.log('Select2 SSD non inizializzato, procedo con creazione...');
                    }
                    
                    $(select).select2({
                        placeholder: 'Seleziona SSD...',
                        allowClear: true,
                        width: '100%',
                        minimumResultsForSearch: 1, // Mostra search box sempre
                        language: {
                            noResults: function() {
                                return "Nessun risultato trovato";
                            },
                            searching: function() {
                                return "Ricerca in corso...";
                            }
                        }
                    });
                    
                    // Forza la creazione della search box per SSD
                    setTimeout(function() {
                        const searchContainer = $('.select2-search');
                        if (searchContainer.length === 0) {
                            console.log('üîß Forzando creazione search box per SSD...');
                            $('.select2-dropdown').prepend('<div class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" placeholder="Cerca SSD..."></div>');
                        }
                    }, 100);
                    
                    console.log('‚úÖ Select2 ricostruito per SSD con search box');
                } else {
                    console.log('‚ö†Ô∏è Select2 non disponibile, uso select normale per SSD');
                    select.innerHTML = '<option value="">Seleziona SSD...</option>';
                    ssdOptions.forEach(ssd => {
                        const option = document.createElement('option');
                        option.value = ssd.id;
                        option.textContent = ssd.text;
                        select.appendChild(option);
                    });
                }
            }
            
            // Mostra messaggio nessun SSD disponibile
            function showNoSsdMessage() {
                let messageDiv = document.getElementById('no-ssd-message');
                if (!messageDiv) {
                    messageDiv = document.createElement('div');
                    messageDiv.id = 'no-ssd-message';
                    messageDiv.style.cssText = 'background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 8px; margin: 20px 0; text-align: center;';
                    messageDiv.innerHTML = '‚ö†Ô∏è Non ci sono discipline esterne disponibili per questo corso di laurea.';
                    
                    const disciplineRows = document.getElementById('discipline-rows');
                    disciplineRows.parentNode.insertBefore(messageDiv, disciplineRows);
                }
                messageDiv.style.display = 'block';
                
                // Nasconde le righe delle discipline e i pulsanti
                document.getElementById('discipline-rows').style.display = 'none';
                document.getElementById('add-discipline').style.display = 'none';
                document.getElementById('simulate-btn').style.display = 'none';
            }
            
            // Nasconde messaggio nessun SSD
            function hideNoSsdMessage() {
                const messageDiv = document.getElementById('no-ssd-message');
                if (messageDiv) {
                    messageDiv.style.display = 'none';
                }
                
                // Mostra le righe delle discipline e i pulsanti
                document.getElementById('discipline-rows').style.display = 'block';
                document.getElementById('add-discipline').style.display = 'block';
                document.getElementById('simulate-btn').style.display = 'block';
            }
            
            // Aggiunge riga disciplina
            function addDisciplineRow() {
                disciplineCount++;
                const container = document.getElementById('discipline-rows');
                
                const row = document.createElement('div');
                row.className = 'discipline-row';
                row.id = `discipline-row-${disciplineCount}`;
                
                row.innerHTML = `
                    <div class="form-group">
                        <label>SSD <span class="required">*</span></label>
                        <select class="ssd-select" name="ssd_${disciplineCount}">
                            <option value="">Seleziona SSD...</option>
                        </select>
                        <div class="error-message" id="ssd_${disciplineCount}_error"></div>
                    </div>
                    <div class="form-group">
                        <label>Nome Disciplina <span class="required">*</span></label>
                        <input type="text" name="nome_${disciplineCount}" placeholder="Nome disciplina...">
                        <div class="error-message" id="nome_${disciplineCount}_error"></div>
                    </div>
                    <div class="form-group">
                        <label>CFU <span class="required">*</span></label>
                        <input type="number" name="cfu_${disciplineCount}" min="1" max="30" placeholder="CFU">
                        <div class="error-message" id="cfu_${disciplineCount}_error"></div>
                    </div>
                    <button type="button" class="btn-remove-discipline" onclick="removeDisciplineRow(${disciplineCount})">üóëÔ∏è</button>
                `;
                
                container.appendChild(row);
                
                        // Popola la select SSD se ci sono opzioni disponibili
                        if (ssdOptions.length > 0) {
                            const select = row.querySelector('.ssd-select');
                            populateSsdSelect(select);
                        }
                
                // Event listeners per validazione
                const inputs = row.querySelectorAll('input');
                inputs.forEach(input => {
                    input.addEventListener('focus', () => {
                        console.log('üéØ Focus su input disciplina:', input.name);
                        clearFieldError(input);
                    });
                    input.addEventListener('change', () => {
                        console.log('üîÑ Change su input disciplina:', input.name);
                        clearFieldError(input);
                    });
                    input.addEventListener('input', () => {
                        console.log('‚å®Ô∏è Input su input disciplina:', input.name);
                        clearFieldError(input);
                    });
                    input.addEventListener('click', () => {
                        console.log('üëÜ Click su input disciplina:', input.name);
                        clearFieldError(input);
                    });
                });
                
                // Event listener per select SSD (usando Select2 se disponibile)
                const ssdSelect = row.querySelector('.ssd-select');
                if (ssdSelect) {
                    ssdSelect.addEventListener('focus', () => {
                        console.log('üéØ Focus su select SSD');
                        clearFieldError(ssdSelect);
                    });
                    // Usa Select2 change event se disponibile, altrimenti fallback su change standard
                    if (typeof $ !== 'undefined' && $.fn.select2) {
                        $(ssdSelect).on('change', () => {
                            console.log('üîÑ Change su select SSD (Select2)');
                            clearFieldError(ssdSelect);
                        });
                    } else {
                        ssdSelect.addEventListener('change', () => {
                            console.log('üîÑ Change su select SSD (standard)');
                            clearFieldError(ssdSelect);
                        });
                    }
                }
            }
            
            // Rimuove riga disciplina
            window.removeDisciplineRow = function(id) {
                const row = document.getElementById(`discipline-row-${id}`);
                if (row && disciplineCount > 1) { // Posso eliminare se ce ne sono pi√π di 1
                    row.remove();
                    disciplineCount--; // Decrementa il contatore
                } else if (row && disciplineCount === 1) {
                    // Mostra errore se si prova a eliminare l'ultima riga
                    showDisciplineWarningModal();
                }
            }
            
            // Simula
            async function simulate() {
                if (!validateForm()) {
                    return;
                }
                
                showLoading();
                
                try {
                    const data = {
                        cdl: currentCdl,
                        discipline: getDisciplineData()
                    };
                    
                    const response = await fetch('/api/simulate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        console.log('‚úÖ Simulazione completata con successo');
                        currentResults = result.data;
                        displayResults(result.data);
                        console.log('‚úÖ DisplayResults completato');
                    } else {
                        console.log('‚ùå Errore nella simulazione:', result.error);
                        alert('Errore nella simulazione: ' + (result.error || 'Errore sconosciuto'));
                    }
                } catch (error) {
                    console.error('Errore:', error);
                    alert('Errore nella simulazione');
                } finally {
                    hideLoading();
                }
            }
            
            // Valida form
            function validateForm() {
                let isValid = true;
                
                // Pulisci solo gli errori del simulatore
                document.querySelectorAll('#cdl-error, [id$="_error"]').forEach(error => {
                    if (error.id.includes('ssd_') || error.id.includes('nome_') || error.id.includes('cfu_') || error.id === 'cdl-error') {
                        error.style.display = 'none';
                        error.textContent = '';
                    }
                });
                
                // Valida CDL
                const cdlSelect = document.getElementById('simulator-cdl');
                if (!cdlSelect.value) {
                    showFieldError(cdlSelect, 'Seleziona un corso di laurea valido per procedere con la simulazione.');
                    isValid = false;
                }
                
                // Valida discipline
                const rows = document.querySelectorAll('.discipline-row');
                if (rows.length === 0) {
                    const addButton = document.getElementById('add-discipline');
                    showFieldError(addButton, 'Aggiungi almeno una disciplina esterna.');
                    isValid = false;
                } else {
                    rows.forEach((row, index) => {
                        const ssdSelect = row.querySelector('.ssd-select');
                        const nomeInput = row.querySelector('input[name^="nome_"]');
                        const cfuInput = row.querySelector('input[name^="cfu_"]');
                        
                        if (!ssdSelect.value) {
                            showFieldError(ssdSelect, 'Seleziona il settore scientifico disciplinare della materia che hai sostenuto.');
                            isValid = false;
                        }
                        
                        if (!nomeInput.value.trim()) {
                            showFieldError(nomeInput, 'Inserisci il nome completo della disciplina che hai sostenuto.');
                            isValid = false;
                        }
                        
                        if (!cfuInput.value || cfuInput.value < 1 || cfuInput.value > 30) {
                            showFieldError(cfuInput, 'Inserisci il numero di crediti formativi universitari (CFU) della disciplina (1-30).');
                            isValid = false;
                        }
                    });
                }
                
                // Scroll al primo errore
                if (!isValid) {
                    const firstError = document.querySelector('.field-error, .error-message[style*="block"]');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth' });
                    }
                }
                
                return isValid;
            }
            
            // Ottiene dati discipline
            function getDisciplineData() {
                const data = [];
                const rows = document.querySelectorAll('.discipline-row');
                
                rows.forEach(row => {
                    const ssdSelect = row.querySelector('.ssd-select');
                    const nomeInput = row.querySelector('input[name^="nome_"]');
                    const cfuInput = row.querySelector('input[name^="cfu_"]');
                    
                    if (ssdSelect.value && nomeInput.value && cfuInput.value) {
                        data.push({
                            ssd: ssdSelect.value,
                            nome: nomeInput.value.trim(),
                            cfu: parseInt(cfuInput.value)
                        });
                    }
                });
                
                return data;
            }
            
            // Ordina risultati per priorit√† (per tabella Dettaglio) o status (per altre tabelle)
            function sortResultsByStatus(data, tableType = 'summary') {
                if (!data || !Array.isArray(data)) return data;
                
                return data.sort((a, b) => {
                    if (tableType === 'detail') {
                        // Per la tabella Dettaglio, ordina per priorit√† numerica
                        const prioritaA = parseInt(a.priorita) || 999;
                        const prioritaB = parseInt(b.priorita) || 999;
                        
                        // Ordina per priorit√† crescente (1, 2, 3, ...)
                        return prioritaA - prioritaB;
                    } else {
                        // Per le altre tabelle, mantieni l'ordinamento per status
                        const statusA = getLastValue(a).toLowerCase();
                        const statusB = getLastValue(b).toLowerCase();
                        
                        // Priorit√†: TOT > PARZIALE > NON
                        const priority = { 'tot': 1, 'parziale': 2, 'non': 3 };
                        const priorityA = priority[statusA] || 4;
                        const priorityB = priority[statusB] || 4;
                        
                        return priorityA - priorityB;
                    }
                });
            }
            
            // Ottieni l'ultimo valore di un oggetto (per lo status)
            function getLastValue(obj) {
                const values = Object.values(obj);
                return values[values.length - 1] || '';
            }

            // Funzione per ordinare i dati per colonna
            function sortDataByColumn(data, column, direction = 'asc') {
                if (!data || !Array.isArray(data)) return data;

                return data.sort((a, b) => {
                    let valueA = a[column];
                    let valueB = b[column];

                    // Gestione speciale per diversi tipi di dati
                    if (column === 'priorita' || column === 'cfu_richiesti' || column === 'cfu_assegnati' || 
                        column === 'cfu_riconosciuti' || column === 'integrativi_richiesti' || column === 'cfu_residui') {
                        // Per numeri
                        valueA = parseInt(valueA) || 0;
                        valueB = parseInt(valueB) || 0;
                    } else if (column === 'stato') {
                        // Per stato: TOT > PARZIALE > NON
                        const priority = { 'tot': 1, 'parziale': 2, 'non': 3 };
                        valueA = priority[valueA?.toLowerCase()] || 4;
                        valueB = priority[valueB?.toLowerCase()] || 4;
                    } else {
                        // Per stringhe
                        valueA = (valueA || '').toString().toLowerCase();
                        valueB = (valueB || '').toString().toLowerCase();
                    }

                    if (direction === 'asc') {
                        return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;
                    } else {
                        return valueA > valueB ? -1 : valueA < valueB ? 1 : 0;
                    }
                });
            }

            // Funzione per gestire il click sulle intestazioni
            function handleHeaderClick(tableId, column) {
                const table = document.getElementById(tableId);
                const header = table.querySelector(`th[data-sort="${column}"]`);
                
                // Determina la direzione dell'ordinamento PRIMA di rimuovere le classi
                let direction = 'asc';
                if (header.classList.contains('sort-asc')) {
                    direction = 'desc';
                } else if (header.classList.contains('sort-desc')) {
                    direction = 'asc';
                }
                
                // Rimuovi classi di ordinamento da tutte le intestazioni di questa tabella
                table.querySelectorAll('th.sortable-header').forEach(th => {
                    th.classList.remove('sort-asc', 'sort-desc');
                });

                // Aggiungi la classe appropriata all'header corrente
                if (direction === 'asc') {
                    header.classList.add('sort-asc');
                } else {
                    header.classList.add('sort-desc');
                }

                // Ordina i dati
                const currentData = window.currentResults[tableId.replace('-table', '')] || [];
                const sortedData = sortDataByColumn([...currentData], column, direction);
                
                // Aggiorna i risultati
                window.currentResults[tableId.replace('-table', '')] = sortedData;
                
                // Ridisegna la tabella
                displayTable(tableId, sortedData, tableId.replace('-table', '-pagination'));
            }
            
            // Funzione per configurare header ordinabili solo se necessario
            function setupSortableHeaders() {
                // Questa funzione verr√† chiamata dopo che i risultati sono stati caricati
                // per determinare se attivare l'ordinamento
            }

            // Funzione per attivare/disattivare ordinamento basato sul numero di elementi
            function updateSortableHeaders() {
                const tables = ['detail-table', 'summary-table', 'leftover-table'];
                
                tables.forEach(tableId => {
                    const table = document.getElementById(tableId);
                    if (!table) return;
                    
                    const dataKey = tableId.replace('-table', '');
                    const dataCount = window.currentResults ? (window.currentResults[dataKey] || []).length : 0;
                    
                    // Se ci sono pi√π di 5 elementi, attiva l'ordinamento
                    if (dataCount > 5) {
                        table.querySelectorAll('th').forEach(th => {
                            th.classList.add('sortable-header');
                            if (!th.getAttribute('data-sort')) {
                                // Aggiungi data-sort se non presente
                                const text = th.textContent.trim();
                                const sortMap = {
                                    'Disciplina UniMarconi': 'disciplina_unimarconi',
                                    'CFU Richiesti': 'cfu_richiesti',
                                    'Disciplina Esterna': 'disciplina_esterna',
                                    'CFU Assegnati': 'cfu_assegnati',
                                    'Priorit√†': 'priorita',
                                    'Stato': 'stato',
                                    'Note': 'note',
                                    'CFU Riconosciuti': 'cfu_riconosciuti',
                                    'Integrativi Richiesti': 'integrativi_richiesti',
                                    'CFU Residui': 'cfu_residui',
                                    'Motivazione': 'motivazione'
                                };
                                th.setAttribute('data-sort', sortMap[text] || '');
                            }
                        });
                        
                        // Aggiungi event listeners se non gi√† presenti
                        table.querySelectorAll('th.sortable-header').forEach(header => {
                            if (!header.hasAttribute('data-sort-listener')) {
                                header.setAttribute('data-sort-listener', 'true');
                                header.addEventListener('click', function() {
                                    const column = this.getAttribute('data-sort');
                                    handleHeaderClick(tableId, column);
                                });
                            }
                        });
                    } else {
                        // Se 5 o meno elementi, disattiva l'ordinamento
                        table.querySelectorAll('th').forEach(th => {
                            th.classList.remove('sortable-header', 'sort-asc', 'sort-desc');
                            th.removeAttribute('data-sort-listener');
                        });
                    }
                });
            }

            // Mostra risultati
            function displayResults(results) {
                console.log('üìä Displaying results:', results);
                const container = document.getElementById('results-container');
                container.style.display = 'block';
                
                // Salva i risultati per l'ordinamento
                window.currentResults = results;
                
                // Aggiorna configurazione header ordinabili
                updateSortableHeaders();
                
                // Ordina i risultati: Dettaglio per priorit√†, altre per status
                if (results.detail) {
                    results.detail = sortResultsByStatus(results.detail, 'detail');
                }
                if (results.summary) {
                    results.summary = sortResultsByStatus(results.summary, 'summary');
                }
                
                displayTable('detail-table', results.detail, 'detail-pagination');
                displayTable('summary-table', results.summary, 'summary-pagination');
                displayTable('leftover-table', results.leftovers, 'leftover-pagination');
                
                // Il pulsante salva simulazione √® stato rimosso
                
                console.log('‚úÖ Risultati mostrati senza refresh');
            }
            
            // Mostra tabella con paginazione
            function displayTable(tableId, data, paginationId, itemsPerPage = 5) {
                const table = document.getElementById(tableId);
                const tbody = table.querySelector('tbody');
                const pagination = document.getElementById(paginationId);
                
                tbody.innerHTML = '';
                pagination.innerHTML = '';
                
                if (data.length === 0) {
                    const row = tbody.insertRow();
                    const cell = row.insertCell();
                    cell.colSpan = table.querySelectorAll('th').length;
                    cell.textContent = 'Nessun dato disponibile';
                    cell.style.textAlign = 'center';
                    return;
                }
                
                const totalPages = Math.ceil(data.length / itemsPerPage);
                let currentPage = 1;
                
                function showPage(page) {
                    tbody.innerHTML = '';
                    const start = (page - 1) * itemsPerPage;
                    const end = start + itemsPerPage;
                    const pageData = data.slice(start, end);
                    
                    pageData.forEach(item => {
                        const row = tbody.insertRow();
                        
                        // Mapping corretto per ogni tabella
                        if (tableId === 'detail-table') {
                            // Tabella Dettaglio: Disciplina Unimarconi, CFU Richiesti, Disciplina Esterna, CFU Assegnati, Priorit√†, Stato, Note
                            row.insertCell().textContent = item.disciplina_unimarconi || '';
                            row.insertCell().textContent = item.cfu_richiesti || '';
                            row.insertCell().textContent = item.disciplina_esterna || '';
                            row.insertCell().textContent = item.cfu_assegnati || '';
                            
                            // Colonna Priorit√† con nota per priorit√† 999
                            const prioritaCell = row.insertCell();
                            const priorita = parseInt(item.priorita) || 0;
                            if (priorita === 999) {
                                prioritaCell.innerHTML = `${priorita} <span style="color: #E57552; font-size: 12px;" title="Priorit√† 999: Disciplina non riconosciuta o non disponibile">‚ö†Ô∏è</span>`;
                            } else {
                                prioritaCell.textContent = priorita;
                            }
                            
                            // Colonna Stato
                            const statoCell = row.insertCell();
                            if (item.stato && ['tot', 'parziale', 'non'].includes(item.stato.toLowerCase())) {
                                const span = document.createElement('span');
                                span.textContent = item.stato.toUpperCase();
                                span.className = `stato-${item.stato.toLowerCase()}`;
                                statoCell.appendChild(span);
                            } else {
                                statoCell.textContent = item.stato || '';
                            }
                            
                            // Colonna Note con spiegazione per priorit√† 999
                            const noteCell = row.insertCell();
                            let noteText = item.note || '';
                            if (priorita === 999 && !noteText) {
                                noteText = 'Disciplina non riconosciuta o non disponibile per questo corso di laurea';
                            }
                            noteCell.textContent = noteText;
                        } else if (tableId === 'summary-table') {
                            // Tabella Riepilogo: Disciplina Unimarconi, CFU Richiesti, CFU Riconosciuti, Integrativi Richiesti, Stato
                            row.insertCell().textContent = item.disciplina_unimarconi || '';
                            row.insertCell().textContent = item.cfu_richiesti || '';
                            row.insertCell().textContent = item.cfu_riconosciuti || '';
                            row.insertCell().textContent = item.integrativi_richiesti || '';
                            
                            // Ultima colonna: Stato
                            const statusCell = row.insertCell();
                            if (item.stato && ['tot', 'parziale', 'non'].includes(item.stato.toLowerCase())) {
                                const span = document.createElement('span');
                                span.textContent = item.stato.toUpperCase();
                                span.className = `stato-${item.stato.toLowerCase()}`;
                                statusCell.appendChild(span);
                            } else {
                                statusCell.textContent = item.stato || '';
                            }
                        } else if (tableId === 'leftover-table') {
                            // Tabella Rimanenze: Disciplina Esterna, CFU Residui, Motivazione
                            row.insertCell().textContent = item.disciplina_esterna || '';
                            row.insertCell().textContent = item.cfu_residui || '';
                            row.insertCell().textContent = item.motivazione || '';
                        }
                    });
                    
                    // Paginazione migliorata (massimo 5 pulsanti)
                    pagination.innerHTML = '';
                    
                    console.log(`Paginazione: pagina ${page} di ${totalPages}`);
                    
                    // Pulsante precedente
                    if (page > 1) {
                        const prevBtn = document.createElement('button');
                        prevBtn.textContent = '‚Üê';
                        prevBtn.addEventListener('click', () => {
                            currentPage = page - 1;
                            showPage(page - 1);
                        });
                        pagination.appendChild(prevBtn);
                    }
                    
                    // Numeri pagina (massimo 5)
                    let startPage = Math.max(1, page - 2);
                    let endPage = Math.min(totalPages, startPage + 4);
                    
                    if (endPage - startPage < 4) {
                        startPage = Math.max(1, endPage - 4);
                    }
                    
                    console.log(`Mostrando pagine da ${startPage} a ${endPage}`);
                    
                    for (let i = startPage; i <= endPage; i++) {
                        const button = document.createElement('button');
                        button.textContent = i;
                        button.className = i === page ? 'active' : '';
                        button.addEventListener('click', () => {
                            currentPage = i;
                            showPage(i);
                        });
                        pagination.appendChild(button);
                    }
                    
                    // Pulsante successivo
                    if (page < totalPages) {
                        const nextBtn = document.createElement('button');
                        nextBtn.textContent = '‚Üí';
                        nextBtn.addEventListener('click', () => {
                            currentPage = page + 1;
                            showPage(page + 1);
                        });
                        pagination.appendChild(nextBtn);
                    }
                }
                
                showPage(1);
            }
            
            // La funzione createStudent √® stata rimossa - ora si usa saveStudentAndSimulation
            
            // La funzione saveSimulation √® stata rimossa - ora si usa saveStudentAndSimulation
            
            // Utility functions
            function showError(elementId, message) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.textContent = message;
                    element.style.display = 'block';
                    
                    // Aggiungi classe error al campo
                    const field = element.previousElementSibling;
                    if (field) {
                        field.classList.add('field-error');
                    }
                }
            }
            
            function clearError(elementId) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.style.display = 'none';
                    element.textContent = '';
                }
            }
            
            function clearAllErrors() {
                console.log('üßπ Pulizia di tutti gli errori...');
                
                // Pulisci tutti i messaggi di errore
                document.querySelectorAll('.error-message').forEach(error => {
                    error.style.display = 'none';
                    error.textContent = '';
                });
                
                // Rimuovi le classi di errore dai campi
                document.querySelectorAll('.field-error').forEach(field => {
                    field.classList.remove('field-error');
                });
                
                console.log('‚úÖ Tutti gli errori puliti');
            }
            
            function clearFieldError(field) {
                console.log('üßπ Pulizia errore per campo:', field.id || field.name);
                
                // Rimuovi classe di errore dal campo
                field.classList.remove('field-error');
                
                // Cerca e rimuovi messaggio di errore nel parentNode
                const errorElement = field.parentNode.querySelector('.error-message');
                if (errorElement) {
                    errorElement.style.display = 'none';
                    errorElement.textContent = '';
                    console.log('‚úÖ Rimosso errore dal parentNode');
                }
                
                // Cerca anche nel container per i campi del form studente
                const container = field.closest('.form-group') || field.closest('.field-container');
                if (container) {
                    const containerError = container.querySelector('.error-message');
                    if (containerError) {
                        containerError.style.display = 'none';
                        containerError.textContent = '';
                        console.log('‚úÖ Rimosso errore dal container');
                    }
                }
                
                // Cerca anche per ID specifico del campo
                const specificError = document.getElementById(field.id + '-error');
                if (specificError) {
                    specificError.style.display = 'none';
                    specificError.textContent = '';
                    console.log('‚úÖ Rimosso errore specifico per ID');
                }
                
                // Cerca tutti gli elementi con classe error-message nel parentNode
                const allErrors = field.parentNode.querySelectorAll('.error-message');
                allErrors.forEach(error => {
                    error.style.display = 'none';
                    error.textContent = '';
                });
                
                console.log('üßπ Pulizia completata per campo:', field.id || field.name);
            }
            
            function showLoading() {
                document.getElementById('loading-overlay').style.display = 'flex';
            }
            
            function hideLoading() {
                document.getElementById('loading-overlay').style.display = 'none';
            }
            
            // Funzioni per il modale avviso disciplina
            function showDisciplineWarningModal() {
                document.getElementById('discipline-warning-modal').style.display = 'flex';
            }
            
            function closeDisciplineWarningModal() {
                document.getElementById('discipline-warning-modal').style.display = 'none';
            }
            
            
            // Salva studente e simulazione
            async function saveStudentAndSimulation() {
                console.log('üíæ Salvataggio studente e simulazione...');
                
                // Valida prima i dati dello studente
                if (!validateStudentForm()) {
                    return;
                }
                
                showLoading();
                
                try {
                    // Controlla se √® stata fatta una simulazione
                    const hasSimulation = currentResults !== null && currentCdl !== '';
                    
                    console.log('üìä Simulazione presente:', hasSimulation);
                    
                    if (hasSimulation) {
                        // Salva sia studente che simulazione
                        console.log('üîÑ Salvataggio studente + simulazione...');
                        
                        // Prima salva lo studente usando form data
                        const formData = new FormData();
                        formData.append('firstName', document.getElementById('firstName').value.trim());
                        formData.append('lastName', document.getElementById('lastName').value.trim());
                        formData.append('email', document.getElementById('email').value.trim());
                        formData.append('codiceFiscale', document.getElementById('codiceFiscale').value.trim());
                        formData.append('ateneoProvenienza', document.getElementById('ateneoProvenienza').value.trim());
                        formData.append('corsoStudioInteresse', document.getElementById('corsoStudioInteresse').value.trim());
                        formData.append('phone', document.getElementById('phone').value.trim());
                        formData.append('notes', document.getElementById('notes').value.trim());
                        
                        const studentResponse = await fetch('/student/new', {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        });
                        
                        if (!studentResponse.ok) {
                            throw new Error('Errore nel salvataggio dello studente');
                        }
                        
                        const studentResult = await studentResponse.json();
                        const studentId = studentResult.studentId;
                        
                        console.log('‚úÖ Studente salvato con ID:', studentId);
                        
                        // Poi salva la simulazione
                    const simulationData = {
                        cdl: currentCdl,
                        discipline: getDisciplineData(),
                        saveSimulation: true,
                            studentId: parseInt(studentId)
                    };
                    
                        const simulationResponse = await fetch('/api/simulate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(simulationData)
                    });
                    
                        const simulationResult = await simulationResponse.json();
                        
                        if (simulationResult.success) {
                            console.log('‚úÖ Simulazione salvata:', simulationResult);
                            // Redirect alla pagina dello studente
                            window.location.href = `/student/${studentId}`;
                    } else {
                            throw new Error('Errore nel salvataggio della simulazione: ' + (simulationResult.message || 'Errore sconosciuto'));
                        }
                        
                    } else {
                        // Salva solo lo studente
                        console.log('üîÑ Salvataggio solo studente...');
                        
                        const formData = new FormData();
                        formData.append('firstName', document.getElementById('firstName').value.trim());
                        formData.append('lastName', document.getElementById('lastName').value.trim());
                        formData.append('email', document.getElementById('email').value.trim());
                        formData.append('codiceFiscale', document.getElementById('codiceFiscale').value.trim());
                        formData.append('ateneoProvenienza', document.getElementById('ateneoProvenienza').value.trim());
                        formData.append('corsoStudioInteresse', document.getElementById('corsoStudioInteresse').value.trim());
                        formData.append('phone', document.getElementById('phone').value.trim());
                        formData.append('notes', document.getElementById('notes').value.trim());
                        
                        const studentResponse = await fetch('/student/new', {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        });
                        
                        if (!studentResponse.ok) {
                            throw new Error('Errore nel salvataggio dello studente');
                        }
                        
                        const studentResult = await studentResponse.json();
                        const studentId = studentResult.studentId;
                        
                        console.log('‚úÖ Studente salvato con ID:', studentId);
                        
                        // Redirect alla pagina dello studente
                        window.location.href = `/student/${studentId}`;
                    }
                    
                } catch (error) {
                    console.error('‚ùå Errore nel salvataggio:', error);
                    hideLoading();
                    alert('Errore nel salvataggio: ' + error.message);
                }
            }
            
            // Valida form studente
            function validateStudentForm() {
                let isValid = true;
                
                // Pulisci tutti gli errori precedenti
                clearAllErrors();
                
                // Valida nome
                const firstName = document.getElementById('firstName');
                if (!firstName.value.trim()) {
                    showFieldError(firstName, 'Il nome √® obbligatorio');
                    isValid = false;
                }
                
                // Valida cognome
                const lastName = document.getElementById('lastName');
                if (!lastName.value.trim()) {
                    showFieldError(lastName, 'Il cognome √® obbligatorio');
                    isValid = false;
                }
                
                // Valida CDL
                const cdlSelect = document.getElementById('simulator-cdl');
                if (!cdlSelect.value) {
                    showFieldError(cdlSelect, 'Seleziona un corso di laurea valido per procedere con la simulazione.');
                    isValid = false;
                }
                
                // Valida discipline
                const rows = document.querySelectorAll('.discipline-row');
                if (rows.length === 0) {
                    showFieldError(document.getElementById('add-discipline'), 'Aggiungi almeno una disciplina esterna.');
                    isValid = false;
                } else {
                    rows.forEach((row, index) => {
                        const ssdSelect = row.querySelector('.ssd-select');
                        const nomeInput = row.querySelector('input[name^="nome_"]');
                        const cfuInput = row.querySelector('input[name^="cfu_"]');
                        
                        if (!ssdSelect.value) {
                            showFieldError(ssdSelect, 'Seleziona il settore scientifico disciplinare della materia che hai sostenuto.');
                            isValid = false;
                        }
                        
                        if (!nomeInput.value.trim()) {
                            showFieldError(nomeInput, 'Inserisci il nome completo della disciplina che hai sostenuto.');
                            isValid = false;
                        }
                        
                        if (!cfuInput.value || cfuInput.value < 1 || cfuInput.value > 30) {
                            showFieldError(cfuInput, 'Inserisci il numero di crediti formativi universitari (CFU) della disciplina (1-30).');
                            isValid = false;
                        }
                    });
                }
                
                // Valida email
                const email = document.getElementById('email');
                if (!email.value.trim()) {
                    showFieldError(email, 'L\'email √® obbligatoria');
                    isValid = false;
                } else if (!isValidEmail(email.value)) {
                    showFieldError(email, 'Inserisci un\'email valida');
                    isValid = false;
                }
                
                // Valida codice fiscale
                const codiceFiscale = document.getElementById('codiceFiscale');
                if (!codiceFiscale.value.trim()) {
                    showFieldError(codiceFiscale, 'Il codice fiscale √® obbligatorio');
                    isValid = false;
                } else if (codiceFiscale.value.length !== 16) {
                    showFieldError(codiceFiscale, 'Il codice fiscale deve essere di 16 caratteri');
                    isValid = false;
                }
                
                // Valida ateneo
                const ateneoProvenienza = document.getElementById('ateneoProvenienza');
                if (!ateneoProvenienza.value.trim()) {
                    showFieldError(ateneoProvenienza, 'L\'ateneo di provenienza √® obbligatorio');
                    isValid = false;
                }
                
                // Valida corso di studio
                const corsoStudioInteresse = document.getElementById('corsoStudioInteresse');
                if (!corsoStudioInteresse.value.trim()) {
                    showFieldError(corsoStudioInteresse, 'Il corso di studio di interesse √® obbligatorio');
                    isValid = false;
                }
                
                // Valida telefono
                const phone = document.getElementById('phone');
                if (!phone.value.trim()) {
                    showFieldError(phone, 'Il telefono √® obbligatorio');
                    isValid = false;
                }
                
                // Scroll al primo errore
                if (!isValid) {
                    const firstError = document.querySelector('.field-error');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth' });
                    }
                }
                
                return isValid;
            }
            
            // Valida email
            function isValidEmail(email) {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(email);
            }
            
            // Mostra errore per campo
            function showFieldError(field, message) {
                field.classList.add('field-error');
                
                // Cerca messaggio di errore esistente
                let errorElement = field.parentNode.querySelector('.error-message');
                if (!errorElement) {
                    // Cerca nel container per i campi del form studente
                    const container = field.closest('.form-group') || field.closest('.field-container');
                    if (container) {
                        errorElement = container.querySelector('.error-message');
                    }
                }
                
                if (!errorElement) {
                    // Crea nuovo elemento di errore
                    errorElement = document.createElement('div');
                    errorElement.className = 'error-message';
                    errorElement.style.cssText = 'color: #dc3545; font-size: 14px; margin-top: 5px; display: block;';
                    errorElement.id = field.id + '-error';
                    
                    // Per le select, inserisci dopo la select stessa
                    if (field.tagName === 'SELECT' || field.classList.contains('ssd-select')) {
                        // Inserisci dopo la select
                        field.parentNode.insertBefore(errorElement, field.nextSibling);
                    } else {
                        // Per gli input, inserisci dopo il campo
                        field.parentNode.insertBefore(errorElement, field.nextSibling);
                    }
                }
                
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }
        </script>
{% endblock %}