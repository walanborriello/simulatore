{% extends 'base.html.twig' %}

{% block title %}Dettagli Studente - Simulatore CFU UniMarconi{% endblock %}

        {% block styles %}
        .student-details {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .student-header {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .student-info h1 {
            margin: 0;
            color: #E57552;
            font-size: 2em;
        }
        
        .student-email {
            color: #666;
            font-size: 1.1em;
            margin-top: 5px;
        }
        
        .header-actions {
            display: flex;
            gap: 10px;
        }
        
        .details-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .detail-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
        }
        
        .detail-label {
            font-weight: bold;
            color: #379975;
            margin-bottom: 5px;
        }
        
        .detail-value {
            color: #444444;
        }
        
        .notes-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        
        
        .page-actions {
            text-align: center;
            margin-top: 30px;
        }
        
        .page-actions a {
            margin: 0 10px;
        }
        
        /* Simulazioni Table */
        .simulations-section {
            margin-top: 40px;
        }
        
        .simulations-title {
            color: #E57552;
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        
        .simulations-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .simulations-table th {
            background: #E57552;
            color: white;
            padding: 12px;
            text-align: left;
            font-weight: 600;
        }
        
        .simulations-table td {
            padding: 12px;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .simulations-table tr:nth-child(even) td {
            background-color: #f8f9fa;
        }
        
        
        /* Simulatore Styles (stesso stile di new.html.twig) */
        .simulator-container {
            margin-top: 40px;
            padding: 30px;
            background: #f8f9fa;
            border-radius: 12px;
            border: 1px solid #e0e0e0;
        }
        
        .simulator-title {
            color: #E57552;
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .simulator-section {
            margin-bottom: 30px;
        }
        
        .discipline-row {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            align-items: flex-start;
        }
        
        .discipline-row .form-group {
            margin-bottom: 0;
        }
        
        .discipline-row .form-group:nth-child(1) { flex: 1; }
        .discipline-row .form-group:nth-child(2) { flex: 1; }
        .discipline-row .form-group:nth-child(3) { flex: 0.5; }
        .discipline-row .form-group:nth-child(4) { flex: 0.3; }
        
        .btn-add-discipline {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .btn-add-discipline:hover {
            background: #218838;
        }
        
        .btn-remove-discipline {
            background: #dc3545;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            align-self: flex-start;
            height: 40px; /* Stessa altezza degli input */
            margin-top: 35px;
        }
        
        .btn-remove-discipline:hover {
            background: #c82333;
        }
        
        .btn-simulate {
            background: #28a745;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            margin-top: 20px;
        }
        
        .btn-simulate:hover {
            background: #20c997;
        }
        
        .btn-save-simulation {
            background: #28a745;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            margin-top: 10px;
        }
        
        .btn-save-simulation:hover {
            background: #20c997;
        }
        
        .error-message {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
        
        .field-error {
            border-color: #dc3545 !important;
        }
        
                .loading-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(255, 255, 255, 0.95);
                    display: none;
                    justify-content: center;
                    align-items: center;
                    z-index: 9999;
                }
                
                .loading-content {
                    text-align: center;
                }
                
                .loading-spinner {
                    width: 60px;
                    height: 60px;
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #E57552;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                    margin: 0 auto 20px;
                }
                
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                .loading-text {
                    color: #E57552;
                    font-size: 16px;
                    font-weight: 500;
                }
                
                /* Forza visibilit√† search box Select2 */
                .select2-search {
                    display: block !important;
                }
                
                .select2-search__field {
                    width: 100% !important;
                    padding: 8px !important;
                    border: 1px solid #ddd !important;
                    border-radius: 4px !important;
                }
                
                /* Stili Select2 per mantenere dimensioni corrette */
                .select2-container {
                    width: 100% !important;
                }
                
                .select2-container--default .select2-selection--single {
                    height: 40px !important;
                    border: 1px solid #ddd !important;
                    border-radius: 4px !important;
                    font-size: 14px !important;
                }
                
                .select2-container--default .select2-selection--single .select2-selection__rendered {
                    line-height: 38px !important;
                    padding-left: 12px !important;
                    color: #333 !important;
                }
                
                .select2-container--default .select2-selection--single .select2-selection__arrow {
                    height: 38px !important;
                    right: 8px !important;
                }
                
                .select2-dropdown {
                    border: 1px solid #ddd !important;
                    border-radius: 4px !important;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
                }
                
                .select2-results__option {
                    padding: 8px 12px !important;
                    font-size: 14px !important;
                }
                
                .select2-results__option--highlighted {
                    background-color: #E57552 !important;
                    color: white !important;
                }
        
        .results-container {
            margin-top: 30px;
            display: none;
        }
        
        .results-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .results-table th {
            background: #E57552;
            color: white;
            padding: 12px;
            text-align: left;
            font-weight: 600;
        }
        
        .results-table td {
            padding: 12px;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .results-table tr:nth-child(even) td {
            background-color: #f8f9fa;
        }
        
        /* Stili per stati risultati */
        .stato-tot {
            background-color: #d4edda !important;
            color: #155724 !important;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 600;
        }
        
        .stato-parziale {
            background-color: #fff3cd !important;
            color: #856404 !important;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 600;
        }
        
        .stato-non {
            background-color: #f8d7da !important;
            color: #721c24 !important;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: 600;
        }
        
        /* Stili per intestazioni cliccabili */
        .sortable-header {
            cursor: pointer;
            user-select: none;
            position: relative;
            transition: background-color 0.2s;
        }
        
        
        .sortable-header::after {
            content: ' ‚Üï';
            opacity: 0.5;
            font-size: 12px;
        }
        
        .sortable-header.sort-asc::after {
            content: ' ‚Üë';
            opacity: 1;
            color: #fff;
        }
        
        .sortable-header.sort-desc::after {
            content: ' ‚Üì';
            opacity: 1;
            color: #fff;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 15px;
        }
        
        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 4px;
        }
        
        .pagination button:hover {
            background: #f8f9fa;
        }
        
        .pagination button.active {
            background: #379975;
            color: white;
            border-color: #379975;
        }
        
        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #444444;
        }
        
        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #379975;
            box-shadow: 0 0 0 2px rgba(55, 153, 117, 0.2);
        }
        
        .required {
            color: #dc3545;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        /* Stili Modale */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        }
        
        .modal-content {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 25px;
            border-bottom: 1px solid #e0e0e0;
            background: #f8f9fa;
            border-radius: 12px 12px 0 0;
        }
        
        .modal-header h3 {
            margin: 0;
            color: #E57552;
            font-size: 20px;
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #666;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: background-color 0.2s;
        }
        
        .modal-close:hover {
            background-color: #e0e0e0;
        }
        
        .modal-body {
            padding: 25px;
        }
        
        .modal-body p {
            margin: 0 0 15px 0;
            color: #333;
            font-size: 16px;
        }
        
        .simulation-info {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            border-left: 4px solid #E57552;
        }
        
        .simulation-info strong {
            color: #E57552;
        }
        
        .warning-text {
            color: #dc3545 !important;
            font-weight: 600;
            background: #fff5f5;
            padding: 10px;
            border-radius: 6px;
            border: 1px solid #fecaca;
        }
        
        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 20px 25px;
            border-top: 1px solid #e0e0e0;
            background: #f8f9fa;
            border-radius: 0 0 12px 12px;
        }
        
        .btn-danger {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: background-color 0.2s;
        }
        
        .btn-danger:hover {
            background-color: #c82333;
        }
        
        .btn-small {
            padding: 6px 10px;
            font-size: 12px;
            margin: 0 2px;
        }
{% endblock %}

{% block content %}
        {% if successMessage %}
            <div class="alert alert-success" style="background: #d4edda; color: #155724; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #c3e6cb;">
                ‚úÖ {{ successMessage }}
            </div>
        {% endif %}
        
        <div class="student-details">
            <div class="student-header">
                <div class="student-info">
                    <h1>{{ student.fullName }}</h1>
                    <div class="student-email">{{ student.email }}</div>
                </div>
            <div class="header-actions">
                <button type="button" class="btn btn-primary" id="toggle-simulator">üéì Simulatore</button>
            </div>
            </div>
            
            <div class="details-grid">
                <div class="detail-item">
                    <div class="detail-label">Codice Fiscale</div>
                    <div class="detail-value">{{ student.codiceFiscale }}</div>
                </div>
                
                <div class="detail-item">
                    <div class="detail-label">Ateneo di Provenienza</div>
                    <div class="detail-value">{{ student.ateneoProvenienza }}</div>
                </div>
                
                <div class="detail-item">
                    <div class="detail-label">Corso di Studio di Interesse</div>
                    <div class="detail-value">{{ student.corsoStudioInteresse }}</div>
                </div>
                
                <div class="detail-item">
                    <div class="detail-label">Telefono</div>
                    <div class="detail-value">{{ student.phone }}</div>
                </div>
                
                <div class="detail-item">
                    <div class="detail-label">Data Registrazione</div>
                    <div class="detail-value">{{ student.createdAt|date('d/m/Y H:i') }}</div>
                </div>
                
                <div class="detail-item">
                    <div class="detail-label">Ultimo Aggiornamento</div>
                    <div class="detail-value">{{ student.updatedAt|date('d/m/Y H:i') }}</div>
                </div>
            </div>
            
            {% if student.notes %}
            <div class="notes-section">
                <div class="detail-label">Note</div>
                <div class="detail-value">{{ student.notes }}</div>
            </div>
            {% endif %}
            
            <div class="page-actions">
                <a href="/student/{{ student.id }}/edit" class="btn btn-primary">Modifica</a>
                <button type="button" class="btn btn-danger" onclick="showDeleteStudentModal()">Elimina</button>
                <a href="/" class="btn btn-secondary">Torna alla Lista</a>
            </div>
            
            <!-- Tabella Simulazioni -->
            <div class="simulations-section">
                <h2 class="simulations-title">üìä Simulazioni Effettuate</h2>
                <table class="simulations-table" id="simulations-table">
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>CDL</th>
                            <th>CFU Riconosciuti</th>
                            <th>CFU Richiesti</th>
                            <th>CFU Integrativi</th>
                            <th>Azioni</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for simulation in simulations %}
                        <tr>
                            <td>{{ simulation.createdAt|date('d/m/Y H:i') }}</td>
                            <td>{{ simulation.cdl }}</td>
                            <td>{{ simulation.totalCfuRecognized }}</td>
                            <td>{{ simulation.totalCfuRequired }}</td>
                            <td>{{ simulation.totalCfuIntegrative }}</td>
                            <td>
                                <div class="actions">
                                    <a href="/student/{{ student.id }}/simulation/{{ simulation.id }}" class="btn btn-primary btn-small" title="Visualizza/Modifica">üìä</a>
                                    <button class="btn btn-danger btn-small" onclick="showDeleteSimulationModal({{ simulation.id }}, '{{ simulation.cdl }}', '{{ simulation.createdAt|date('d/m/Y') }}', {{ simulation.totalCfuRecognized }})" title="Elimina Simulazione">üóëÔ∏è</button>
                                </div>
                            </td>
                        </tr>
                        {% else %}
                        <tr>
                            <td colspan="6" style="text-align: center; color: #666;">
                                Nessuna simulazione effettuata per questo studente
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            
            <!-- Simulatore CFU -->
            <div class="simulator-container" id="simulator-container" style="display: none;">
                <h2 class="simulator-title">üéì Simulatore CFU</h2>
                
                <div class="simulator-section">
                    <div class="form-group">
                        <label for="simulator-cdl">Seleziona Corso di Laurea <span class="required">*</span></label>
                        <select id="simulator-cdl" name="simulator-cdl">
                            <option value="">Seleziona corso di laurea...</option>
                            {% for cdl in cdlOptions %}
                                <option value="{{ cdl.cdl }}">{{ cdl.cdl }} - {{ cdl.orient }}</option>
                            {% endfor %}
                        </select>
                        <div class="error-message" id="cdl-error"></div>
                    </div>
                </div>
                
                <div class="simulator-section" id="discipline-section" style="display: none;">
                    <h3 style="color: #E57552; margin-bottom: 20px;">Discipline Esterne da Riconoscere</h3>
                    <div id="discipline-rows">
                        <!-- Le righe delle discipline verranno aggiunte dinamicamente -->
                    </div>
                    <button type="button" class="btn-add-discipline" id="add-discipline">+ Aggiungi Disciplina</button>
                    <button type="button" class="btn-simulate" id="simulate-btn" onclick="return false;">Calcola Simulazione</button>
                </div>
                
                <!-- Risultati -->
                <div class="results-container" id="results-container">
                    <h3 style="color: #E57552; margin-bottom: 20px;">Risultati Simulazione</h3>
                    
                    <!-- Legenda Stati -->
                    <div class="stato-legend" style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #E57552;">
                        <h5 style="margin: 0 0 10px 0; color: #E57552;">üìã Legenda Stati:</h5>
                        <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <span class="stato-tot">TOT</span>
                                <span style="font-size: 14px;">= Totale (riconoscimento completo)</span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <span class="stato-parziale">PARZIALE</span>
                                <span style="font-size: 14px;">= Parziale (riconoscimento parziale)</span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 5px;">
                                <span class="stato-non">NON</span>
                                <span style="font-size: 14px;">= Non riconosciuto</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tabella 1: Dettaglio -->
                    <div id="detail-table-container">
                        <h4>Dettaglio Riconoscimenti</h4>
                        <table class="results-table" id="detail-table">
                            <thead>
                                <tr>
                                    <th>Disciplina UniMarconi</th>
                                    <th>CFU Richiesti</th>
                                    <th>Disciplina Esterna</th>
                                    <th>CFU Assegnati</th>
                                    <th>Priorit√†</th>
                                    <th>Stato</th>
                                    <th>Note</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                        <div class="pagination" id="detail-pagination"></div>
                    </div>
                    
                    <!-- Tabella 2: Riepilogo -->
                    <div id="summary-table-container">
                        <h4>Riepilogo</h4>
                        <table class="results-table" id="summary-table">
                            <thead>
                                <tr>
                                    <th>Disciplina UniMarconi</th>
                                    <th>CFU Richiesti</th>
                                    <th>CFU Riconosciuti</th>
                                    <th>Integrativi Richiesti</th>
                                    <th>Stato</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                        <div class="pagination" id="summary-pagination"></div>
                    </div>
                    
                    <!-- Tabella 3: Rimanenze -->
                    <div id="leftover-table-container">
                        <h4>Rimanenze</h4>
                        <table class="results-table" id="leftover-table">
                            <thead>
                                <tr>
                                    <th>Disciplina Esterna</th>
                                    <th>CFU Residui</th>
                                    <th>Motivazione</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    <div class="pagination" id="leftover-pagination"></div>
                </div>
                
                <!-- Pulsante Salva Simulazione -->
                <div style="text-align: center; margin-top: 30px;">
                    <button type="button" class="btn-save-simulation" id="save-simulation-btn" style="display: none;">üíæ Salva Simulazione</button>
                </div>
            </div>
        </div>
        </div>
        
        <!-- Loading Overlay -->
        <div class="loading-overlay" id="loading-overlay">
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <div class="loading-text">Caricamento in corso...</div>
            </div>
        </div>
        
        <!-- Modale Conferma Eliminazione Simulazione -->
        <div class="modal-overlay" id="delete-simulation-modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üóëÔ∏è Conferma Eliminazione Simulazione</h3>
                    <button class="modal-close" onclick="closeDeleteSimulationModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Sei sicuro di voler eliminare questa simulazione?</p>
                    <div class="simulation-info">
                        <strong>CDL:</strong> <span id="modal-cdl"></span><br>
                        <strong>Data:</strong> <span id="modal-date"></span><br>
                        <strong>CFU Riconosciuti:</strong> <span id="modal-cfu-rec"></span>
                    </div>
                    <p class="warning-text">‚ö†Ô∏è Questa azione non pu√≤ essere annullata.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="closeDeleteSimulationModal()">Annulla</button>
                    <button class="btn btn-danger" onclick="confirmDeleteSimulation()">Elimina</button>
                </div>
            </div>
        </div>

        <!-- Modale Conferma Eliminazione Studente -->
        <div class="modal-overlay" id="delete-student-modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üóëÔ∏è Conferma Eliminazione Studente</h3>
                    <button class="modal-close" onclick="closeDeleteStudentModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Sei sicuro di voler eliminare questo studente?</p>
                    <div class="student-info">
                        <strong>Nome:</strong> {{ student.firstName }} {{ student.lastName }}<br>
                        <strong>Email:</strong> {{ student.email }}
                    </div>
                    <p class="warning-text">‚ö†Ô∏è Questa azione non pu√≤ essere annullata e eliminer√† anche tutte le simulazioni associate.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="closeDeleteStudentModal()">Annulla</button>
                    <button class="btn btn-danger" onclick="confirmDeleteStudentFromModal()">Elimina</button>
                </div>
            </div>
        </div>

        <!-- Modale Avviso Disciplina -->
        <div class="modal-overlay" id="discipline-warning-modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚ö†Ô∏è Avviso</h3>
                    <button class="modal-close" onclick="closeDisciplineWarningModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Deve essere presente almeno una disciplina per procedere con la simulazione.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" onclick="closeDisciplineWarningModal()">OK</button>
                </div>
            </div>
        </div>

        <!-- Modale Nessuna Simulazione da Salvare -->
        <div class="modal-overlay" id="no-simulation-modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚ö†Ô∏è Nessuna Simulazione</h3>
                    <button class="modal-close" onclick="closeNoSimulationModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Nessuna simulazione da salvare. Esegui prima una simulazione.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" onclick="closeNoSimulationModal()">OK</button>
                </div>
            </div>
        </div>
        
        <script>
            // Variabili globali
            let disciplineCount = 0;
            let currentCdl = '';
            let ssdOptions = [];
            let currentResults = null;
            const studentId = {{ student.id }};
            
            // Inizializzazione
            document.addEventListener('DOMContentLoaded', function() {
                // Blocca tutti i submit di form per evitare refresh
                document.addEventListener('submit', function(e) {
                    console.log('üö´ Bloccato submit di form:', e.target);
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                });
                console.log('üöÄ Inizializzazione simulatore...');
                console.log('jQuery disponibile:', typeof $ !== 'undefined');
                console.log('Select2 disponibile:', typeof $ !== 'undefined' && $.fn.select2);
                
                addDisciplineRow(); // Riga 1
                addDisciplineRow(); // Riga 2
                addDisciplineRow(); // Riga 3 - Solo per grafica
                
                // Event listeners
                document.getElementById('toggle-simulator').addEventListener('click', toggleSimulator);
                
                
                document.getElementById('add-discipline').addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    addDisciplineRow();
                });
                document.getElementById('simulate-btn').addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    console.log('üö´ Bloccato comportamento di default del pulsante');
                    simulate();
                    return false;
                });
                document.getElementById('save-simulation-btn').addEventListener('click', saveSimulation);
                
                // Inizializza paginazione simulazioni
                initSimulationsPagination();
                
                // Aggiungi event listeners per ordinamento tabelle (solo se necessario)
                setupSortableHeaders();
            });
            
            // Toggle simulatore
            async function toggleSimulator() {
                const container = document.getElementById('simulator-container');
                const button = document.getElementById('toggle-simulator');
                
                if (container.style.display === 'none') {
                    container.style.display = 'block';
                    button.textContent = '‚ùå Chiudi Simulatore';
                    container.scrollIntoView({ behavior: 'smooth' });
                    
                    // Le opzioni CDL sono gi√† presenti nel DOM
                    console.log('‚úÖ Opzioni CDL gi√† presenti nel DOM');
                    
                    // Inizializza Select2 se non √® gi√† inizializzato
                    if (typeof $ !== 'undefined' && $.fn.select2) {
                    const cdlSelect = document.getElementById('simulator-cdl');
                        if (!$(cdlSelect).hasClass('select2-hidden-accessible')) {
                            initializeCdlSelect2();
                        }
                    }
                } else {
                    container.style.display = 'none';
                    button.textContent = 'üéì Simulatore';
                }
            }
            
            // Inizializza Select2 per CDL (le opzioni sono gi√† presenti nel DOM)
            function initializeCdlSelect2() {
                console.log('üîÑ Inizializzazione Select2 per CDL (opzioni gi√† presenti)...');
                    
                    const cdlSelect = document.getElementById('simulator-cdl');
                    
                        // Distruggi Select2 se esiste
                        if ($(cdlSelect).hasClass('select2-hidden-accessible')) {
                            $(cdlSelect).select2('destroy');
                        }
                        
                        // Inizializza Select2
                        $(cdlSelect).select2({
                            placeholder: 'Seleziona corso di laurea...',
                            allowClear: true,
                            width: '100%',
                            minimumResultsForSearch: 1,
                            language: {
                                noResults: function() {
                                    return "Nessun risultato trovato";
                                },
                                searching: function() {
                                    return "Ricerca in corso...";
                                }
                            }
                        });
                        
                // Event listener per cambio CDL
                        $(cdlSelect).on('change', handleCdlChange);
                console.log('‚úÖ Select2 inizializzato per CDL');
            }
            
            
            // Gestisce cambio CDL
            async function handleCdlChange() {
                console.log('üéØ handleCdlChange chiamata!');
                const cdlSelect = document.getElementById('simulator-cdl');
                const disciplineSection = document.getElementById('discipline-section');
                
                currentCdl = cdlSelect.value;
                console.log('üìã CDL selezionato:', currentCdl);
                
                if (currentCdl) {
                    disciplineSection.style.display = 'block';
                    showLoading();
                    
                    try {
                        await loadSsdOptions(currentCdl);
                        
                        if (ssdOptions.length === 0) {
                            showNoSsdMessage();
                        } else {
                            hideNoSsdMessage();
                            populateAllSsdSelects();
                        }
                        
                        // Scroll lento verso la sezione discipline
                        disciplineSection.scrollIntoView({ behavior: 'smooth' });
                    } finally {
                        hideLoading();
                    }
                } else {
                    disciplineSection.style.display = 'none';
                }
                
                clearError('cdl-error');
            }
            
            // Carica opzioni SSD per CDL
            async function loadSsdOptions(cdl) {
                try {
                    const response = await fetch(`/api/ssd/${cdl}`);
                    const ssdData = await response.json();
                    ssdOptions = ssdData || [];
                    console.log(`SSD caricati per ${cdl}:`, ssdOptions.length);
                } catch (error) {
                    console.error('Errore nel caricamento SSD:', error);
                    ssdOptions = [];
                }
            }
            
            // Popola tutte le select SSD
            function populateAllSsdSelects() {
                const ssdSelects = document.querySelectorAll('.ssd-select');
                ssdSelects.forEach(select => {
                    populateSsdSelect(select);
                });
            }
            
            // Popola una select SSD
            function populateSsdSelect(select) {
                select.innerHTML = '<option value="">Seleziona SSD...</option>';
                ssdOptions.forEach(ssd => {
                    const option = document.createElement('option');
                    option.value = ssd.id;
                    option.textContent = ssd.text;
                    select.appendChild(option);
                });
                
                // Distruggi Select2 esistente e ricostruisci
                console.log('Inizializzando Select2 per SSD...');
                console.log('jQuery disponibile per SSD:', typeof $ !== 'undefined');
                console.log('Select2 disponibile per SSD:', typeof $ !== 'undefined' && $.fn.select2);
                
                // Prova con Select2, fallback a select normale
                if (typeof $ !== 'undefined' && $.fn.select2) {
                    // Controlla se Select2 √® gi√† inizializzato
                    if ($(select).hasClass('select2-hidden-accessible')) {
                        console.log('Select2 SSD gi√† inizializzato, distruggo e ricostruisco...');
                        $(select).select2('destroy');
                    } else {
                        console.log('Select2 SSD non inizializzato, procedo con creazione...');
                    }
                    
                    $(select).select2({
                        placeholder: 'Seleziona SSD...',
                        allowClear: true,
                        width: '100%',
                        minimumResultsForSearch: 1, // Mostra search box sempre
                        language: {
                            noResults: function() {
                                return "Nessun risultato trovato";
                            },
                            searching: function() {
                                return "Ricerca in corso...";
                            }
                        }
                    });
                    
                    // Forza la creazione della search box per SSD
                    setTimeout(function() {
                        const searchContainer = $('.select2-search');
                        if (searchContainer.length === 0) {
                            console.log('üîß Forzando creazione search box per SSD...');
                            $('.select2-dropdown').prepend('<div class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="textbox" aria-autocomplete="list" placeholder="Cerca SSD..."></div>');
                        }
                    }, 100);
                    
                    console.log('‚úÖ Select2 ricostruito per SSD con search box');
                } else {
                    console.log('‚ö†Ô∏è Select2 non disponibile, uso select normale per SSD');
                    select.innerHTML = '<option value="">Seleziona SSD...</option>';
                    ssdOptions.forEach(ssd => {
                        const option = document.createElement('option');
                        option.value = ssd.id;
                        option.textContent = ssd.text;
                        select.appendChild(option);
                    });
                }
            }
            
            // Mostra messaggio nessun SSD disponibile
            function showNoSsdMessage() {
                let messageDiv = document.getElementById('no-ssd-message');
                if (!messageDiv) {
                    messageDiv = document.createElement('div');
                    messageDiv.id = 'no-ssd-message';
                    messageDiv.style.cssText = 'background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 8px; margin: 20px 0; text-align: center;';
                    messageDiv.innerHTML = '‚ö†Ô∏è Non ci sono discipline esterne disponibili per questo corso di laurea.';
                    
                    const disciplineRows = document.getElementById('discipline-rows');
                    disciplineRows.parentNode.insertBefore(messageDiv, disciplineRows);
                }
                messageDiv.style.display = 'block';
                
                // Nasconde le righe delle discipline e i pulsanti
                document.getElementById('discipline-rows').style.display = 'none';
                document.getElementById('add-discipline').style.display = 'none';
                document.getElementById('simulate-btn').style.display = 'none';
            }
            
            // Nasconde messaggio nessun SSD
            function hideNoSsdMessage() {
                const messageDiv = document.getElementById('no-ssd-message');
                if (messageDiv) {
                    messageDiv.style.display = 'none';
                }
                
                // Mostra le righe delle discipline e i pulsanti
                document.getElementById('discipline-rows').style.display = 'block';
                document.getElementById('add-discipline').style.display = 'block';
                document.getElementById('simulate-btn').style.display = 'block';
            }
            
            // Aggiunge riga disciplina
            function addDisciplineRow() {
                disciplineCount++;
                const container = document.getElementById('discipline-rows');
                
                const row = document.createElement('div');
                row.className = 'discipline-row';
                row.id = `discipline-row-${disciplineCount}`;
                
                row.innerHTML = `
                    <div class="form-group">
                        <label>SSD <span class="required">*</span></label>
                        <select class="ssd-select" name="ssd_${disciplineCount}">
                            <option value="">Seleziona SSD...</option>
                        </select>
                        <div class="error-message" id="ssd_${disciplineCount}_error"></div>
                    </div>
                    <div class="form-group">
                        <label>Nome Disciplina <span class="required">*</span></label>
                        <input type="text" name="nome_${disciplineCount}" placeholder="Nome disciplina...">
                        <div class="error-message" id="nome_${disciplineCount}_error"></div>
                    </div>
                    <div class="form-group">
                        <label>CFU <span class="required">*</span></label>
                        <input type="number" name="cfu_${disciplineCount}" min="1" max="30" placeholder="CFU">
                        <div class="error-message" id="cfu_${disciplineCount}_error"></div>
                    </div>
                    <button type="button" class="btn-remove-discipline" onclick="removeDisciplineRow(${disciplineCount})">üóëÔ∏è</button>
                `;
                
                container.appendChild(row);
                
                        // Popola la select SSD se ci sono opzioni disponibili
                        if (ssdOptions.length > 0) {
                            const select = row.querySelector('.ssd-select');
                            populateSsdSelect(select);
                        }
                
                // Event listeners per validazione
                const inputs = row.querySelectorAll('input');
                inputs.forEach(input => {
                    input.addEventListener('focus', () => clearFieldError(input));
                    input.addEventListener('change', () => clearFieldError(input));
                });
                
                // Event listener per select SSD (usando Select2 se disponibile)
                const ssdSelect = row.querySelector('.ssd-select');
                if (ssdSelect) {
                    ssdSelect.addEventListener('focus', () => clearFieldError(ssdSelect));
                    // Usa Select2 change event se disponibile, altrimenti fallback su change standard
                    if (typeof $ !== 'undefined' && $.fn.select2) {
                        $(ssdSelect).on('change', () => clearFieldError(ssdSelect));
                    } else {
                        ssdSelect.addEventListener('change', () => clearFieldError(ssdSelect));
                    }
                }
            }
            
            // Rimuove riga disciplina
            window.removeDisciplineRow = function(id) {
                const row = document.getElementById(`discipline-row-${id}`);
                if (row && disciplineCount > 1) { // Posso eliminare se ce ne sono pi√π di 1
                    row.remove();
                    disciplineCount--; // Decrementa il contatore
                } else if (row && disciplineCount === 1) {
                    // Mostra errore se si prova a eliminare l'ultima riga
                    showDisciplineWarningModal();
                }
            }
            
            // Simula
            async function simulate() {
                if (!validateForm()) {
                    return;
                }
                
                showLoading();
                
                try {
                    const data = {
                        cdl: currentCdl,
                        discipline: getDisciplineData(),
                        studentId: studentId
                    };
                    
                    const response = await fetch('/api/simulate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        console.log('‚úÖ Simulazione completata con successo');
                        currentResults = result.data;
                        displayResults(result.data);
                        console.log('‚úÖ DisplayResults completato');
                    } else {
                        console.log('‚ùå Errore nella simulazione:', result.error);
                        alert('Errore nella simulazione: ' + (result.error || 'Errore sconosciuto'));
                    }
                } catch (error) {
                    console.error('Errore:', error);
                    alert('Errore nella simulazione');
                } finally {
                    hideLoading();
                }
            }
            
            // Valida form
            function validateForm() {
                let isValid = true;
                
                // Valida CDL
                const cdlSelect = document.getElementById('simulator-cdl');
                if (!cdlSelect.value) {
                    showError('cdl-error', 'Seleziona un corso di laurea valido per procedere con la simulazione.');
                    isValid = false;
                }
                
                // Valida discipline
                const rows = document.querySelectorAll('.discipline-row');
                rows.forEach((row, index) => {
                    const ssdSelect = row.querySelector('.ssd-select');
                    const nomeInput = row.querySelector('input[name^="nome_"]');
                    const cfuInput = row.querySelector('input[name^="cfu_"]');
                    
                    // Estrai il numero della disciplina dal name del campo
                    const ssdName = ssdSelect.name;
                    const disciplineNumber = ssdName.split('_')[1];
                    
                    if (!ssdSelect.value) {
                        showError(`ssd_${disciplineNumber}_error`, 'Seleziona il settore scientifico disciplinare della materia che hai sostenuto.');
                        isValid = false;
                    }
                    
                    if (!nomeInput.value.trim()) {
                        showError(`nome_${disciplineNumber}_error`, 'Inserisci il nome completo della disciplina che hai sostenuto.');
                        isValid = false;
                    }
                    
                    if (!cfuInput.value || cfuInput.value < 1 || cfuInput.value > 30) {
                        showError(`cfu_${disciplineNumber}_error`, 'Inserisci il numero di crediti formativi universitari (CFU) della disciplina (1-30).');
                        isValid = false;
                    }
                });
                
                // Scroll al primo errore
                if (!isValid) {
                    const firstError = document.querySelector('.field-error, .error-message[style*="block"]');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth' });
                    }
                }
                
                return isValid;
            }
            
            // Ottiene dati discipline
            function getDisciplineData() {
                const data = [];
                const rows = document.querySelectorAll('.discipline-row');
                
                rows.forEach(row => {
                    const ssdSelect = row.querySelector('.ssd-select');
                    const nomeInput = row.querySelector('input[name^="nome_"]');
                    const cfuInput = row.querySelector('input[name^="cfu_"]');
                    
                    if (ssdSelect.value && nomeInput.value && cfuInput.value) {
                        data.push({
                            ssd: ssdSelect.value,
                            nome: nomeInput.value.trim(),
                            cfu: parseInt(cfuInput.value)
                        });
                    }
                });
                
                return data;
            }
            
            // Ordina risultati per status (riconosciuti e parziali prima)
            function sortResultsByStatus(data) {
                if (!data || !Array.isArray(data)) return data;
                
                return data.sort((a, b) => {
                    const statusA = getLastValue(a);
                    const statusB = getLastValue(b);
                    
                    // Controlla che i valori siano stringhe prima di chiamare toLowerCase
                    const statusAStr = (statusA && typeof statusA === 'string') ? statusA.toLowerCase() : '';
                    const statusBStr = (statusB && typeof statusB === 'string') ? statusB.toLowerCase() : '';
                    
                    // Priorit√†: TOT > PARZIALE > NON
                    const priority = { 'tot': 1, 'parziale': 2, 'non': 3 };
                    const priorityA = priority[statusAStr] || 4;
                    const priorityB = priority[statusBStr] || 4;
                    
                    return priorityA - priorityB;
                });
            }
            
            // Ottieni l'ultimo valore di un oggetto (per lo status)
            function getLastValue(obj) {
                const values = Object.values(obj);
                return values[values.length - 1] || '';
            }
            
            // Funzione per ordinare i dati per colonna
            function sortDataByColumn(data, column, direction = 'asc') {
                if (!data || !Array.isArray(data)) return data;

                return data.sort((a, b) => {
                    let valueA = a[column];
                    let valueB = b[column];

                    // Gestione valori null/undefined
                    if (valueA == null) valueA = '';
                    if (valueB == null) valueB = '';

                    // Conversione a stringa per confronto
                    valueA = String(valueA).toLowerCase();
                    valueB = String(valueB).toLowerCase();

                    // Ordinamento numerico per colonne specifiche
                    if (['cfu_richiesti', 'cfu_assegnati', 'cfu_riconosciuti', 'integrativi_richiesti', 'cfu_residui', 'priorita'].includes(column)) {
                        valueA = parseFloat(valueA) || 0;
                        valueB = parseFloat(valueB) || 0;
                    }

                    if (direction === 'asc') {
                        return valueA > valueB ? 1 : valueA < valueB ? -1 : 0;
                    } else {
                        return valueA < valueB ? 1 : valueA > valueB ? -1 : 0;
                    }
                });
            }

            // Funzione per gestire il click sulle intestazioni
            function handleHeaderClick(tableId, column) {
                const table = document.getElementById(tableId);
                const header = table.querySelector(`th[data-sort="${column}"]`);
                
                // Determina la direzione dell'ordinamento PRIMA di rimuovere le classi
                let direction = 'asc';
                if (header.classList.contains('sort-asc')) {
                    direction = 'desc';
                } else if (header.classList.contains('sort-desc')) {
                    direction = 'asc';
                }
                
                // Rimuovi classi di ordinamento da tutte le intestazioni di questa tabella
                table.querySelectorAll('th.sortable-header').forEach(th => {
                    th.classList.remove('sort-asc', 'sort-desc');
                });

                // Aggiungi la classe appropriata all'header corrente
                if (direction === 'asc') {
                    header.classList.add('sort-asc');
                } else {
                    header.classList.add('sort-desc');
                }

                // Ordina i dati
                const currentData = window.currentResults[tableId.replace('-table', '')] || [];
                const sortedData = sortDataByColumn([...currentData], column, direction);
                
                // Aggiorna i risultati
                window.currentResults[tableId.replace('-table', '')] = sortedData;
                
                // Ridisegna la tabella
                displayTable(tableId, sortedData, tableId.replace('-table', '-pagination'));
            }

            // Funzione per configurare header ordinabili solo se necessario
            function setupSortableHeaders() {
                // Questa funzione verr√† chiamata dopo che i risultati sono stati caricati
                // per determinare se attivare l'ordinamento
            }

            // Funzione per attivare/disattivare ordinamento basato sul numero di elementi
            function updateSortableHeaders() {
                const tables = ['detail-table', 'summary-table', 'leftover-table'];
                
                tables.forEach(tableId => {
                    const table = document.getElementById(tableId);
                    if (!table) return;
                    
                    const dataKey = tableId.replace('-table', '');
                    const dataCount = window.currentResults ? (window.currentResults[dataKey] || []).length : 0;
                    
                    // Se ci sono pi√π di 5 elementi, attiva l'ordinamento
                    if (dataCount > 5) {
                        table.querySelectorAll('th').forEach(th => {
                            th.classList.add('sortable-header');
                            if (!th.getAttribute('data-sort')) {
                                // Aggiungi data-sort se non presente
                                const text = th.textContent.trim();
                                const sortMap = {
                                    'Disciplina UniMarconi': 'disciplina_unimarconi',
                                    'CFU Richiesti': 'cfu_richiesti',
                                    'Disciplina Esterna': 'disciplina_esterna',
                                    'CFU Assegnati': 'cfu_assegnati',
                                    'Priorit√†': 'priorita',
                                    'Stato': 'stato',
                                    'Note': 'note',
                                    'CFU Riconosciuti': 'cfu_riconosciuti',
                                    'Integrativi Richiesti': 'integrativi_richiesti',
                                    'CFU Residui': 'cfu_residui',
                                    'Motivazione': 'motivazione'
                                };
                                th.setAttribute('data-sort', sortMap[text] || '');
                            }
                        });
                        
                        // Aggiungi event listeners se non gi√† presenti
                        table.querySelectorAll('th.sortable-header').forEach(header => {
                            if (!header.hasAttribute('data-sort-listener')) {
                                header.setAttribute('data-sort-listener', 'true');
                                header.addEventListener('click', function() {
                                    const column = this.getAttribute('data-sort');
                                    handleHeaderClick(tableId, column);
                                });
                            }
                        });
                    } else {
                        // Se 5 o meno elementi, disattiva l'ordinamento
                        table.querySelectorAll('th').forEach(th => {
                            th.classList.remove('sortable-header', 'sort-asc', 'sort-desc');
                            th.removeAttribute('data-sort-listener');
                        });
                    }
                });
            }

            // Mostra risultati
            function displayResults(results) {
                console.log('üìä Displaying results:', results);
                const container = document.getElementById('results-container');
                container.style.display = 'block';
                
                // Salva i risultati per l'ordinamento
                window.currentResults = {
                    detail: results.detail || [],
                    summary: results.summary || [],
                    leftover: results.leftover || []
                };
                
                // Aggiorna configurazione header ordinabili
                updateSortableHeaders();
                
                // Ordina i risultati: riconosciuti e parziali prima
                if (results.detail) {
                    results.detail = sortResultsByStatus(results.detail);
                }
                if (results.summary) {
                    results.summary = sortResultsByStatus(results.summary);
                }
                
                displayTable('detail-table', results.detail, 'detail-pagination');
                displayTable('summary-table', results.summary, 'summary-pagination');
                displayTable('leftover-table', results.leftovers, 'leftover-pagination');
                
                // Mostra pulsante salva simulazione
                document.getElementById('save-simulation-btn').style.display = 'block';
                
                console.log('‚úÖ Risultati mostrati senza refresh');
            }
            
            // Mostra tabella con paginazione
            function displayTable(tableId, data, paginationId, itemsPerPage = 5) {
                const table = document.getElementById(tableId);
                const tbody = table.querySelector('tbody');
                const pagination = document.getElementById(paginationId);
                
                tbody.innerHTML = '';
                pagination.innerHTML = '';
                
                if (data.length === 0) {
                    const row = tbody.insertRow();
                    const cell = row.insertCell();
                    cell.colSpan = table.querySelectorAll('th').length;
                    cell.textContent = 'Nessun dato disponibile';
                    cell.style.textAlign = 'center';
                    return;
                }
                
                const totalPages = Math.ceil(data.length / itemsPerPage);
                let currentPage = 1;
                
                function showPage(page) {
                    tbody.innerHTML = '';
                    const start = (page - 1) * itemsPerPage;
                    const end = start + itemsPerPage;
                    const pageData = data.slice(start, end);
                    
                    pageData.forEach(item => {
                        const row = tbody.insertRow();
                        
                        // Gestione specifica per tabella detail
                        if (tableId === 'detail-table') {
                            // Disciplina UniMarconi
                            const cell1 = row.insertCell();
                            cell1.textContent = item.disciplina_unimarconi || '';
                            
                            // CFU Richiesti
                            const cell2 = row.insertCell();
                            cell2.textContent = item.cfu_richiesti || '';
                            
                            // Disciplina Esterna
                            const cell3 = row.insertCell();
                            cell3.textContent = item.disciplina_esterna || '';
                            
                            // CFU Assegnati
                            const cell4 = row.insertCell();
                            cell4.textContent = item.cfu_assegnati || '';
                            
                            // Priorit√† con nota per 999
                            const cell5 = row.insertCell();
                            const priorita = parseInt(item.priorita) || 0;
                            if (priorita === 999) {
                                cell5.innerHTML = `${priorita} <span style="color: #E57552; font-size: 12px;" title="Priorit√† 999: Disciplina non riconosciuta o non disponibile">‚ö†Ô∏è</span>`;
                            } else {
                                cell5.textContent = priorita;
                            }
                            
                            // Stato
                            const cell6 = row.insertCell();
                            if (item.stato && ['tot', 'parziale', 'non'].includes(item.stato.toLowerCase())) {
                                const span = document.createElement('span');
                                span.textContent = item.stato.toUpperCase();
                                span.className = `stato-${item.stato.toLowerCase()}`;
                                cell6.appendChild(span);
                            } else {
                                cell6.textContent = item.stato || '';
                            }
                            
                            // Note con spiegazione per priorit√† 999
                            const cell7 = row.insertCell();
                            let noteText = item.note || '';
                            if (priorita === 999 && !noteText) {
                                noteText = 'Disciplina non riconosciuta o non disponibile per questo corso di laurea';
                            }
                            cell7.textContent = noteText;
                        } else {
                            // Gestione normale per altre tabelle
                            Object.values(item).forEach((value, index) => {
                                const cell = row.insertCell();
                                
                                // Applica stili per stato (ultima colonna)
                                if (index === Object.keys(item).length - 1 && value && ['tot', 'parziale', 'non'].includes(value.toLowerCase())) {
                                    console.log(`Applicando stile per stato: ${value}`);
                                    const span = document.createElement('span');
                                    span.textContent = value.toUpperCase();
                                    span.className = `stato-${value.toLowerCase()}`;
                                    cell.appendChild(span);
                                } else {
                                    cell.textContent = value || '';
                                }
                            });
                        }
                    });
                    
                    // Paginazione migliorata (massimo 5 pulsanti)
                    pagination.innerHTML = '';
                    
                    console.log(`Paginazione: pagina ${page} di ${totalPages}`);
                    
                    // Pulsante precedente
                    if (page > 1) {
                        const prevBtn = document.createElement('button');
                        prevBtn.textContent = '‚Üê';
                        prevBtn.addEventListener('click', () => {
                            currentPage = page - 1;
                            showPage(page - 1);
                        });
                        pagination.appendChild(prevBtn);
                    }
                    
                    // Numeri pagina (massimo 5)
                    let startPage = Math.max(1, page - 2);
                    let endPage = Math.min(totalPages, startPage + 4);
                    
                    if (endPage - startPage < 4) {
                        startPage = Math.max(1, endPage - 4);
                    }
                    
                    console.log(`Mostrando pagine da ${startPage} a ${endPage}`);
                    
                    for (let i = startPage; i <= endPage; i++) {
                        const button = document.createElement('button');
                        button.textContent = i;
                        button.className = i === page ? 'active' : '';
                        button.addEventListener('click', () => {
                            currentPage = i;
                            showPage(i);
                        });
                        pagination.appendChild(button);
                    }
                    
                    // Pulsante successivo
                    if (page < totalPages) {
                        const nextBtn = document.createElement('button');
                        nextBtn.textContent = '‚Üí';
                        nextBtn.addEventListener('click', () => {
                            currentPage = page + 1;
                            showPage(page + 1);
                        });
                        pagination.appendChild(nextBtn);
                    }
                }
                
                showPage(1);
            }
            
            // Salva simulazione
            async function saveSimulation() {
                if (!currentResults) {
                    showNoSimulationModal();
                    return;
                }
                
                const saveBtn = document.getElementById('save-simulation-btn');
                saveBtn.style.display = 'none';
                
                // Mostra loading
                showLoading();
                
                try {
                    const simulationData = {
                        cdl: currentCdl,
                        discipline: getDisciplineData(),
                        saveSimulation: true,
                        studentId: studentId // Usa l'ID dello studente corrente
                    };
                    
                    // Crea nuova simulazione
                    const response = await fetch('/api/simulate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(simulationData)
                    });
                    const successMessage = 'Simulazione salvata con successo!';
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Nascondi loading
                        hideLoading();
                        // Refresh della pagina per mostrare il messaggio di successo dalla sessione
                        window.location.reload();
                    } else {
                        hideLoading();
                        alert('‚ùå Errore nel salvataggio: ' + (result.message || 'Errore sconosciuto'));
                        saveBtn.style.display = 'block';
                    }
                } catch (error) {
                    console.error('Errore salvataggio:', error);
                    hideLoading();
                    alert('‚ùå Errore nel salvataggio della simulazione');
                    saveBtn.style.display = 'block';
                }
            }
            
            
            
            // Variabili per il modale di eliminazione
            let simulationToDelete = null;
            
            // Funzioni per il modale di eliminazione simulazione
            function showDeleteSimulationModal(simulationId, cdl, date, cfuRecognized) {
                simulationToDelete = simulationId;
                
                document.getElementById('modal-cdl').textContent = cdl;
                document.getElementById('modal-date').textContent = date;
                document.getElementById('modal-cfu-rec').textContent = cfuRecognized;
                
                document.getElementById('delete-simulation-modal').style.display = 'flex';
            }
            
            function closeDeleteSimulationModal(resetSimulationId = true) {
                document.getElementById('delete-simulation-modal').style.display = 'none';
                if (resetSimulationId) {
                    simulationToDelete = null;
                }
            }
            
            // Funzioni per il modale di eliminazione studente
            function showDeleteStudentModal() {
                document.getElementById('delete-student-modal').style.display = 'flex';
            }
            
            function closeDeleteStudentModal() {
                document.getElementById('delete-student-modal').style.display = 'none';
            }
            
            function confirmDeleteStudentFromModal() {
                closeDeleteStudentModal();
                window.location.href = `/student/{{ student.id }}/delete`;
            }
            
            // Funzioni per il modale avviso disciplina
            function showDisciplineWarningModal() {
                document.getElementById('discipline-warning-modal').style.display = 'flex';
            }
            
            function closeDisciplineWarningModal() {
                document.getElementById('discipline-warning-modal').style.display = 'none';
            }
            
            // Funzioni per il modale nessuna simulazione
            function showNoSimulationModal() {
                document.getElementById('no-simulation-modal').style.display = 'flex';
            }
            
            function closeNoSimulationModal() {
                document.getElementById('no-simulation-modal').style.display = 'none';
            }
            
            async function confirmDeleteSimulation() {
                if (!simulationToDelete) {
                    return;
                }
                
                // Chiudi il modale prima di mostrare il loader
                closeDeleteModal(false);
                showLoading();
                
                try {
                    const response = await fetch(`/api/simulation/${simulationToDelete}/delete`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        closeDeleteModal(true);
                        hideLoading();
                        
                        // Ricarica la pagina per mostrare il messaggio di successo dalla sessione
                        window.location.reload();
                    } else {
                        hideLoading();
                        alert('‚ùå Errore nell\'eliminazione: ' + (result.message || result.error || 'Errore sconosciuto'));
                    }
                } catch (error) {
                    hideLoading();
                    alert('‚ùå Errore nell\'eliminazione della simulazione: ' + error.message);
                }
            }
            
            // Chiudi modali cliccando fuori
            document.addEventListener('click', function(e) {
                const simulationModal = document.getElementById('delete-simulation-modal');
                const studentModal = document.getElementById('delete-student-modal');
                const disciplineModal = document.getElementById('discipline-warning-modal');
                
                if (e.target === simulationModal) {
                    closeDeleteSimulationModal();
                }
                if (e.target === studentModal) {
                    closeDeleteStudentModal();
                }
                if (e.target === disciplineModal) {
                    closeDisciplineWarningModal();
                }
            });
            
            // Utility functions
            function showError(elementId, message) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.textContent = message;
                    element.style.display = 'block';
                    
                    // Aggiungi classe error al campo
                    const field = element.previousElementSibling;
                    if (field) {
                        field.classList.add('field-error');
                    }
                }
            }
            
            function clearError(elementId) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.style.display = 'none';
                    element.textContent = '';
                }
            }
            
            function clearFieldError(field) {
                const errorElement = field.parentNode.querySelector('.error-message');
                if (errorElement) {
                    clearError(errorElement.id);
                }
                field.classList.remove('field-error');
            }
            
            function showLoading() {
                document.getElementById('loading-overlay').style.display = 'flex';
            }
            
            function hideLoading() {
                document.getElementById('loading-overlay').style.display = 'none';
            }
            
        </script>
{% endblock %}